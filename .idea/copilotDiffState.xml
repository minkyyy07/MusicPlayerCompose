<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/data/deezer/DeezerApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/data/deezer/DeezerApi.kt" />
              <option name="updatedContent" value="package com.example.musicplayer.data.deezer&#10;&#10;import com.example.musicplayer.MusicTrack as AppMusicTrack&#10;import io.ktor.client.*&#10;import io.ktor.client.call.*&#10;import io.ktor.client.engine.cio.*&#10;import io.ktor.client.plugins.contentnegotiation.*&#10;import io.ktor.client.request.*&#10;import io.ktor.serialization.kotlinx.json.*&#10;import kotlinx.serialization.SerialName&#10;import kotlinx.serialization.Serializable&#10;import kotlinx.serialization.json.Json&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;&#10;/**&#10; * Поиск треков через Deezer API (публичный, без ключа для базовых запросов).&#10; * Документация: https://developers.deezer.com/api/search&#10; * Замечание: preview (30 сек) доступен в поле preview.&#10; */&#10;object DeezerApi {&#10;    private val json = Json { ignoreUnknownKeys = true }&#10;&#10;    private val client: HttpClient by lazy {&#10;        HttpClient(CIO) {&#10;            install(ContentNegotiation) { json(json) }&#10;        }&#10;    }&#10;&#10;    suspend fun searchTracks(query: String, limit: Int = 25): List&lt;DeezerTrack&gt; {&#10;        if (query.isBlank()) return emptyList()&#10;        val encoded = URLEncoder.encode(query.trim(), StandardCharsets.UTF_8)&#10;        val url = &quot;https://api.deezer.com/search?q=$encoded&amp;limit=$limit&quot;&#10;        val response: DeezerSearchResponse = client.get(url).body()&#10;        return response.data&#10;    }&#10;}&#10;&#10;@Serializable&#10;data class DeezerSearchResponse(&#10;    @SerialName(&quot;data&quot;) val data: List&lt;DeezerTrack&gt; = emptyList(),&#10;    @SerialName(&quot;total&quot;) val total: Int? = null,&#10;    @SerialName(&quot;next&quot;) val next: String? = null&#10;)&#10;&#10;@Serializable&#10;data class DeezerTrack(&#10;    @SerialName(&quot;id&quot;) val id: Long,&#10;    @SerialName(&quot;title&quot;) val title: String? = null,&#10;    @SerialName(&quot;duration&quot;) val durationSec: Long? = null,&#10;    @SerialName(&quot;preview&quot;) val previewUrl: String? = null,&#10;    @SerialName(&quot;artist&quot;) val artist: DeezerArtist? = null,&#10;    @SerialName(&quot;album&quot;) val album: DeezerAlbum? = null&#10;)&#10;&#10;@Serializable&#10;data class DeezerArtist(@SerialName(&quot;name&quot;) val name: String? = null)&#10;&#10;@Serializable&#10;data class DeezerAlbum(&#10;    @SerialName(&quot;title&quot;) val title: String? = null,&#10;    @SerialName(&quot;cover_medium&quot;) val coverMedium: String? = null,&#10;    @SerialName(&quot;cover_big&quot;) val coverBig: String? = null&#10;)&#10;&#10;// Маппер в доменную модель&#10;fun DeezerTrack.toAppMusicTrack(): AppMusicTrack = AppMusicTrack(&#10;    id = id,&#10;    title = title ?: &quot;Unknown&quot;,&#10;    artist = artist?.name ?: &quot;Unknown&quot;,&#10;    album = album?.title ?: &quot;&quot;,&#10;    duration = (durationSec ?: 0L) * 1000L,&#10;    filePath = previewUrl ?: &quot;&quot;,&#10;    coverArtPath = album?.coverBig ?: album?.coverMedium&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/PlaybackProgressBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/PlaybackProgressBar.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun PlaybackProgressBar(&#10;    currentPosition: Float,&#10;    duration: Float,&#10;    onPositionChange: (Float) -&gt; Unit&#10;) {&#10;    Column(modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp)) {&#10;        Slider(&#10;            value = currentPosition,&#10;            onValueChange = onPositionChange,&#10;            valueRange = 0f..duration.coerceAtLeast(1f),&#10;            colors = SliderDefaults.colors(thumbColor = MaterialTheme.colors.primary)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = formatTime(currentPosition.toInt()),&#10;                style = MaterialTheme.typography.caption&#10;            )&#10;            Text(&#10;                text = formatTime(duration.toInt()),&#10;                style = MaterialTheme.typography.caption&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatTime(seconds: Int): String {&#10;    val minutes = seconds / 60&#10;    val remainingSeconds = seconds % 60&#10;    return &quot;%d:%02d&quot;.format(minutes, remainingSeconds)&#10;}" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;&#10;@Composable&#10;fun PlaybackProgressBar(&#10;    progress: Float,&#10;    onSeek: (Float) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(modifier = modifier) {&#10;        Slider(&#10;            value = progress.coerceIn(0f, 1f),&#10;            onValueChange = onSeek,&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color.White,&#10;                activeTrackColor = MusicPlayerColors.Purple,&#10;                inactiveTrackColor = Color.White.copy(alpha = 0.3f)&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(6.dp)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/LibraryScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/LibraryScreen.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun LibraryScreen() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Your Library&quot;,&#10;            style = MaterialTheme.typography.h5,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // TODO: Replace with actual library content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .weight(1f),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;Your music library will appear here&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;&#10;@Composable&#10;fun LibraryScreen(appState: AppState) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Your Library&quot;,&#10;            style = MaterialTheme.typography.h5,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // TODO: Replace with actual library content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .weight(1f),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;Your music library will appear here&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/SettingsScreen.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun SettingsScreen() {&#10;    var darkTheme by remember { mutableStateOf(false) }&#10;    &#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Settings&quot;,&#10;            style = MaterialTheme.typography.h5,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Theme settings&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = 2.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Appearance&quot;,&#10;                    style = MaterialTheme.typography.subtitle1&#10;                )&#10;                &#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&quot;Dark theme&quot;)&#10;                    Switch(&#10;                        checked = darkTheme,&#10;                        onCheckedChange = { darkTheme = it }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;&#10;@Composable&#10;fun SettingsScreen(appState: AppState? = null) {&#10;    var darkTheme by remember { mutableStateOf(false) }&#10;    &#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Settings&quot;,&#10;            style = MaterialTheme.typography.h5,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Theme settings&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = 2.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Appearance&quot;,&#10;                    style = MaterialTheme.typography.subtitle1&#10;                )&#10;                &#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&quot;Dark theme&quot;)&#10;                    Switch(&#10;                        checked = darkTheme,&#10;                        onCheckedChange = { darkTheme = it }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // TODO: Add settings content here&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .weight(1f),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;Settings will appear here&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.theme&#10;&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material.MaterialTheme&#10;import androidx.compose.material.darkColors&#10;import androidx.compose.material.lightColors&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;&#10;private val DarkColorPalette = darkColors(&#10;    primary = Color(0xFFBB86FC),&#10;    primaryVariant = Color(0xFF3700B3),&#10;    secondary = Color(0xFF03DAC6),&#10;    background = Color(0xFF121212),&#10;    surface = Color(0xFF1E1E1E),&#10;    onPrimary = Color.Black,&#10;    onSecondary = Color.Black,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White,&#10;)&#10;&#10;private val LightColorPalette = lightColors(&#10;    primary = Color(0xFF6200EE),&#10;    primaryVariant = Color(0xFF3700B3),&#10;    secondary = Color(0xFF03DAC6),&#10;    background = Color.White,&#10;    surface = Color(0xFFF5F5F5),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black,&#10;)&#10;&#10;@Composable&#10;fun AppTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colors = if (darkTheme) {&#10;        DarkColorPalette&#10;    } else {&#10;        LightColorPalette&#10;    }&#10;&#10;    MaterialTheme(&#10;        colors = colors,&#10;        typography = Typography,&#10;        shapes = Shapes,&#10;        content = content&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.theme&#10;&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material.MaterialTheme&#10;import androidx.compose.material.darkColors&#10;import androidx.compose.material.lightColors&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Современная палитра для музыкального плеера&#10;object MusicPlayerColors {&#10;    // Основные цвета&#10;    val Purple = Color(0xFF6C63FF)&#10;    val PurpleLight = Color(0xFF9B93FF)&#10;    val PurpleDark = Color(0xFF4A42C7)&#10;    &#10;    // Акцентные цвета&#10;    val Pink = Color(0xFFFF6B9D)&#10;    val Orange = Color(0xFFFF8A65)&#10;    val Blue = Color(0xFF42A5F5)&#10;    val Green = Color(0xFF66BB6A)&#10;    &#10;    // Нейтральные цвета&#10;    val DarkBackground = Color(0xFF0D0D0D)&#10;    val DarkSurface = Color(0xFF1A1A1A)&#10;    val DarkCard = Color(0xFF2A2A2A)&#10;    val LightGray = Color(0xFFE0E0E0)&#10;    val MediumGray = Color(0xFF757575)&#10;    val DarkGray = Color(0xFF424242)&#10;    &#10;    // Градиентные цвета&#10;    val GradientStart = Color(0xFF667eea)&#10;    val GradientEnd = Color(0xFFf093fb)&#10;}&#10;&#10;private val DarkColorPalette = darkColors(&#10;    primary = MusicPlayerColors.Purple,&#10;    primaryVariant = MusicPlayerColors.PurpleDark,&#10;    secondary = MusicPlayerColors.Pink,&#10;    background = MusicPlayerColors.DarkBackground,&#10;    surface = MusicPlayerColors.DarkSurface,&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White,&#10;)&#10;&#10;private val LightColorPalette = lightColors(&#10;    primary = MusicPlayerColors.Purple,&#10;    primaryVariant = MusicPlayerColors.PurpleDark,&#10;    secondary = MusicPlayerColors.Pink,&#10;    background = Color.White,&#10;    surface = Color(0xFFFAFAFA),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black,&#10;)&#10;&#10;@Composable&#10;fun AppTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colors = if (darkTheme) {&#10;        DarkColorPalette&#10;    } else {&#10;        LightColorPalette&#10;    }&#10;&#10;    MaterialTheme(&#10;        colors = colors,&#10;        typography = Typography,&#10;        shapes = Shapes,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>