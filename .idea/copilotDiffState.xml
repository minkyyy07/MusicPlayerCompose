<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="import org.jetbrains.compose.desktop.application.dsl.TargetFormat&#10;import org.jetbrains.kotlin.gradle.tasks.KotlinCompile&#10;&#10;plugins {&#10;    kotlin(&quot;jvm&quot;) version &quot;1.9.0&quot;&#10;    id(&quot;org.jetbrains.compose&quot;) version &quot;1.5.0&quot;&#10;    kotlin(&quot;plugin.serialization&quot;) version &quot;1.9.0&quot;&#10;}&#10;&#10;group = &quot;com.example.musicplayer&quot;&#10;version = &quot;1.0.0&quot;&#10;&#10;repositories {&#10;    mavenCentral()&#10;    maven(&quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)&#10;    google()&#10;}&#10;&#10;dependencies {&#10;    // Note: To avoid potential version conflicts, we're using only Compose Desktop dependencies&#10;    // and avoiding AndroidX Compose dependencies in a desktop project&#10;    &#10;    // Compose Desktop&#10;    implementation(compose.desktop.currentOs)&#10;    &#10;    // Material Icons Extended&#10;    implementation(compose.materialIconsExtended)&#10;    &#10;    // Coroutines for Compose Desktop&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-swing:1.7.3&quot;)&#10;    &#10;    // Image loading for Compose Desktop&#10;    implementation(&quot;io.github.skeptick.libres:libres-compose:1.1.3&quot;)&#10;    &#10;    // Logging&#10;    implementation(&quot;io.github.microutils:kotlin-logging-jvm:3.0.5&quot;)&#10;    implementation(&quot;ch.qos.logback:logback-classic:1.4.8&quot;)&#10;    &#10;    // Ktor for API calls + kotlinx.serialization&#10;    implementation(&quot;io.ktor:ktor-client-cio:2.3.5&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-content-negotiation:2.3.5&quot;)&#10;    implementation(&quot;io.ktor:ktor-serialization-kotlinx-json:2.3.5&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0&quot;)&#10;&#10;    // MP3 support for audio playback&#10;    implementation(&quot;javazoom:jlayer:1.0.1&quot;)&#10;    implementation(&quot;org.tritonus:tritonus-share:0.3.7-2&quot;)&#10;&#10;    // Alternative: Use JLayer directly for MP3&#10;    implementation(&quot;fr.delthas:javamp3:1.0.3&quot;)&#10;&#10;    // Test&#10;    testImplementation(kotlin(&quot;test&quot;))&#10;    testImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3&quot;)&#10;    testImplementation(&quot;io.mockk:mockk:1.13.5&quot;)&#10;}&#10;&#10;tasks.test {&#10;    useJUnitPlatform()&#10;}&#10;&#10;kotlin {&#10;    jvmToolchain(17)&#10;    &#10;    // Enable experimental features&#10;    sourceSets.all {&#10;        languageSettings.apply {&#10;            optIn(&quot;kotlin.RequiresOptIn&quot;)&#10;            languageVersion = &quot;1.9&quot;&#10;        }&#10;    }&#10;}&#10;&#10;tasks.withType&lt;KotlinCompile&gt; {&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;        freeCompilerArgs += listOf(&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;            &quot;-Xjvm-default=all&quot;&#10;        )&#10;    }&#10;}&#10;&#10;compose.desktop {&#10;    application {&#10;        mainClass = &quot;com.example.musicplayer.MainKt&quot;&#10;&#10;        nativeDistributions {&#10;            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)&#10;            packageName = &quot;MusicPlayer&quot;&#10;            packageVersion = &quot;1.0.0&quot;&#10;            &#10;            windows {&#10;                menu = true&#10;                upgradeUuid = &quot;123e4567-e89b-12d3-a456-426614174000&quot;&#10;            }&#10;            &#10;            appResourcesRootDir.set(project.layout.projectDirectory.dir(&quot;resources&quot;))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import org.jetbrains.compose.desktop.application.dsl.TargetFormat&#10;import org.jetbrains.kotlin.gradle.tasks.KotlinCompile&#10;&#10;plugins {&#10;    kotlin(&quot;jvm&quot;) version &quot;1.9.0&quot;&#10;    id(&quot;org.jetbrains.compose&quot;) version &quot;1.5.0&quot;&#10;    kotlin(&quot;plugin.serialization&quot;) version &quot;1.9.0&quot;&#10;}&#10;&#10;group = &quot;com.example.musicplayer&quot;&#10;version = &quot;1.0.0&quot;&#10;&#10;repositories {&#10;    mavenCentral()&#10;    maven(&quot;https://maven.pkg.jetbrains.space/public/p/compose/dev&quot;)&#10;    google()&#10;}&#10;&#10;dependencies {&#10;    // Note: To avoid potential version conflicts, we're using only Compose Desktop dependencies&#10;    // and avoiding AndroidX Compose dependencies in a desktop project&#10;    &#10;    // Compose Desktop&#10;    implementation(compose.desktop.currentOs)&#10;    &#10;    // Material Icons Extended&#10;    implementation(compose.materialIconsExtended)&#10;    &#10;    // Coroutines for Compose Desktop&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-swing:1.7.3&quot;)&#10;    &#10;    // Image loading for Compose Desktop&#10;    implementation(&quot;io.github.skeptick.libres:libres-compose:1.1.3&quot;)&#10;    &#10;    // Logging&#10;    implementation(&quot;io.github.microutils:kotlin-logging-jvm:3.0.5&quot;)&#10;    implementation(&quot;ch.qos.logback:logback-classic:1.4.8&quot;)&#10;    &#10;    // Ktor for API calls + kotlinx.serialization&#10;    implementation(&quot;io.ktor:ktor-client-cio:2.3.5&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-content-negotiation:2.3.5&quot;)&#10;    implementation(&quot;io.ktor:ktor-serialization-kotlinx-json:2.3.5&quot;)&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0&quot;)&#10;&#10;    // MP3 support for audio playback - только JLayer&#10;    implementation(&quot;javazoom:jlayer:1.0.1&quot;)&#10;&#10;    // Test&#10;    testImplementation(kotlin(&quot;test&quot;))&#10;    testImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3&quot;)&#10;    testImplementation(&quot;io.mockk:mockk:1.13.5&quot;)&#10;}&#10;&#10;tasks.test {&#10;    useJUnitPlatform()&#10;}&#10;&#10;kotlin {&#10;    jvmToolchain(17)&#10;    &#10;    // Enable experimental features&#10;    sourceSets.all {&#10;        languageSettings.apply {&#10;            optIn(&quot;kotlin.RequiresOptIn&quot;)&#10;            languageVersion = &quot;1.9&quot;&#10;        }&#10;    }&#10;}&#10;&#10;tasks.withType&lt;KotlinCompile&gt; {&#10;    kotlinOptions {&#10;        jvmTarget = &quot;17&quot;&#10;        freeCompilerArgs += listOf(&#10;            &quot;-opt-in=kotlin.RequiresOptIn&quot;,&#10;            &quot;-Xjvm-default=all&quot;&#10;        )&#10;    }&#10;}&#10;&#10;compose.desktop {&#10;    application {&#10;        mainClass = &quot;com.example.musicplayer.MainKt&quot;&#10;&#10;        nativeDistributions {&#10;            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)&#10;            packageName = &quot;MusicPlayer&quot;&#10;            packageVersion = &quot;1.0.0&quot;&#10;            &#10;            windows {&#10;                menu = true&#10;                upgradeUuid = &quot;123e4567-e89b-12d3-a456-426614174000&quot;&#10;            }&#10;            &#10;            appResourcesRootDir.set(project.layout.projectDirectory.dir(&quot;resources&quot;))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/AppState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/AppState.kt" />
              <option name="originalContent" value="package com.example.musicplayer&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.Stable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.window.WindowState&#10;import com.example.musicplayer.audio.SimpleMp3Player&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.io.BufferedInputStream&#10;import java.io.File&#10;import java.net.URL&#10;import javax.sound.sampled.AudioSystem&#10;import java.io.FileInputStream&#10;&#10;@Stable&#10;class AppState(&#10;    val windowState: WindowState,&#10;    private val coroutineScope: CoroutineScope&#10;) {&#10;    private val _currentScreen = MutableStateFlow&lt;Screen&gt;(Screen.Player)&#10;    val currentScreen: StateFlow&lt;Screen&gt; = _currentScreen&#10;&#10;    private val _currentTrack = MutableStateFlow&lt;MusicTrack?&gt;(null)&#10;    val currentTrack: StateFlow&lt;MusicTrack?&gt; = _currentTrack&#10;&#10;    private val _isPlaying = MutableStateFlow(false)&#10;    val isPlaying: StateFlow&lt;Boolean&gt; = _isPlaying&#10;&#10;    private val _trackList = MutableStateFlow&lt;List&lt;MusicTrack&gt;&gt;(emptyList())&#10;    val trackList: StateFlow&lt;List&lt;MusicTrack&gt;&gt; = _trackList&#10;&#10;    private var clip: Any? = null&#10;    private val mp3Player = SimpleMp3Player()&#10;&#10;    // Добавляем доступ к состоянию MP3 плеера&#10;    val playerPosition = mp3Player.position&#10;    val playerDuration = mp3Player.duration&#10;    val playerIsPlaying = mp3Player.isPlaying&#10;&#10;    fun setTrackList(tracks: List&lt;MusicTrack&gt;) {&#10;        _trackList.value = tracks&#10;    }&#10;&#10;    fun navigateTo(screen: Screen) {&#10;        _currentScreen.value = screen&#10;    }&#10;&#10;    fun playPause() {&#10;        try {&#10;            val currentTrack = _currentTrack.value&#10;            if (currentTrack != null &amp;&amp; (currentTrack.filePath.startsWith(&quot;http&quot;) || currentTrack.filePath.lowercase().endsWith(&quot;.mp3&quot;))) {&#10;                // MP3 плеер&#10;                if (mp3Player.isPlaying.value) {&#10;                    mp3Player.pause()&#10;                    _isPlaying.value = false&#10;                } else {&#10;                    mp3Player.play()&#10;                    _isPlaying.value = true&#10;                }&#10;            } else {&#10;                // Стандартный клип для других форматов&#10;                val currentClip = clip as? javax.sound.sampled.Clip&#10;                if (currentClip != null) {&#10;                    if (_isPlaying.value) {&#10;                        currentClip.stop()&#10;                        _isPlaying.value = false&#10;                    } else {&#10;                        currentClip.start()&#10;                        _isPlaying.value = true&#10;                    }&#10;                } else {&#10;                    // Если нет активного плеера, попробуем воспроизвести текущий трек&#10;                    currentTrack?.let { track -&gt;&#10;                        playTrack(track)&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка управления воспроизведением: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    fun seekTo(positionMs: Long) {&#10;        mp3Player.seekTo(positionMs)&#10;    }&#10;&#10;    fun selectTrack(track: MusicTrack) {&#10;        _currentTrack.value = track&#10;        _currentScreen.value = Screen.Player&#10;        playTrack(track)&#10;    }&#10;&#10;    fun playNextTrack() {&#10;        val tracks = _trackList.value&#10;        val currentTrack = _currentTrack.value&#10;        if (tracks.isNotEmpty() &amp;&amp; currentTrack != null) {&#10;            val currentIndex = tracks.indexOf(currentTrack)&#10;            if (currentIndex != -1 &amp;&amp; currentIndex &lt; tracks.size - 1) {&#10;                selectTrack(tracks[currentIndex + 1])&#10;            }&#10;        }&#10;    }&#10;&#10;    fun playPreviousTrack() {&#10;        val tracks = _trackList.value&#10;        val currentTrack = _currentTrack.value&#10;        if (tracks.isNotEmpty() &amp;&amp; currentTrack != null) {&#10;            val currentIndex = tracks.indexOf(currentTrack)&#10;            if (currentIndex &gt; 0) {&#10;                selectTrack(tracks[currentIndex - 1])&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun playTrack(track: MusicTrack) {&#10;        coroutineScope.launch {&#10;            try {&#10;                println(&quot;Попытка воспроизвести трек: ${track.title}&quot;)&#10;                println(&quot;Путь к файлу: ${track.filePath}&quot;)&#10;&#10;                // Остановить предыдущий трек если играет&#10;                stopPlayback()&#10;&#10;                when {&#10;                    track.filePath.startsWith(&quot;http://&quot;) || track.filePath.startsWith(&quot;https://&quot;) -&gt; {&#10;                        println(&quot;Загрузка MP3 по URL...&quot;)&#10;                        if (mp3Player.loadTrack(track.filePath)) {&#10;                            mp3Player.play()&#10;                            _isPlaying.value = true&#10;                            println(&quot;Воспроизведение URL MP3 началось&quot;)&#10;                        } else {&#10;                            throw Exception(&quot;Не удалось загрузить MP3 по URL&quot;)&#10;                        }&#10;                    }&#10;                    track.filePath.lowercase().endsWith(&quot;.mp3&quot;) -&gt; {&#10;                        println(&quot;Загрузка локального MP3 файла...&quot;)&#10;                        if (mp3Player.loadTrack(track.filePath)) {&#10;                            mp3Player.play()&#10;                            _isPlaying.value = true&#10;                            println(&quot;Воспроизведение локального MP3 началось&quot;)&#10;                        } else {&#10;                            throw Exception(&quot;Не удалось загрузить локальный MP3&quot;)&#10;                        }&#10;                    }&#10;                    else -&gt; {&#10;                        println(&quot;Загрузка других форматов...&quot;)&#10;                        val audioFile = File(track.filePath)&#10;                        if (!audioFile.exists()) {&#10;                            throw Exception(&quot;Файл не найден: ${track.filePath}&quot;)&#10;                        }&#10;&#10;                        val audioStream = AudioSystem.getAudioInputStream(audioFile)&#10;                        println(&quot;Аудиопоток получен, создаём клип...&quot;)&#10;                        val newClip = AudioSystem.getClip()&#10;                        newClip.open(audioStream)&#10;&#10;                        println(&quot;Запускаем воспроизведение...&quot;)&#10;                        newClip.start()&#10;                        this@AppState.clip = newClip&#10;                        _isPlaying.value = true&#10;                        println(&quot;Воспроизведение началось успешно!&quot;)&#10;                    }&#10;                }&#10;&#10;            } catch (e: Exception) {&#10;                println(&quot;Ошибка воспроизведения: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;                _isPlaying.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun stopPlayback() {&#10;        try {&#10;            // Остановить MP3 плеер&#10;            mp3Player.stop()&#10;&#10;            // Остановить стандартный клип&#10;            (clip as? javax.sound.sampled.Clip)?.let {&#10;                it.stop()&#10;                it.close()&#10;                clip = null&#10;            }&#10;&#10;            _isPlaying.value = false&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка остановки воспроизведения: ${e.message}&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun rememberAppState(&#10;    windowState: WindowState = WindowState(),&#10;    coroutineScope: CoroutineScope = rememberCoroutineScope()&#10;): AppState {&#10;    return remember(windowState, coroutineScope) {&#10;        AppState(windowState, coroutineScope)&#10;    }&#10;}&#10;&#10;data class MusicTrack(&#10;    val id: Long,&#10;    val title: String,&#10;    val artist: String,&#10;    val album: String,&#10;    val duration: Long,&#10;    val filePath: String,&#10;    val coverArtPath: String? = null&#10;)" />
              <option name="updatedContent" value="package com.example.musicplayer&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.Stable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.ui.window.WindowState&#10;import com.example.musicplayer.audio.SimpleMp3Player&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import java.io.BufferedInputStream&#10;import java.io.File&#10;import java.net.URL&#10;import javax.sound.sampled.AudioSystem&#10;import java.io.FileInputStream&#10;&#10;@Stable&#10;class AppState(&#10;    val windowState: WindowState,&#10;    private val coroutineScope: CoroutineScope&#10;) {&#10;    private val _currentScreen = MutableStateFlow&lt;Screen&gt;(Screen.Player)&#10;    val currentScreen: StateFlow&lt;Screen&gt; = _currentScreen&#10;&#10;    private val _currentTrack = MutableStateFlow&lt;MusicTrack?&gt;(null)&#10;    val currentTrack: StateFlow&lt;MusicTrack?&gt; = _currentTrack&#10;&#10;    private val _isPlaying = MutableStateFlow(false)&#10;    val isPlaying: StateFlow&lt;Boolean&gt; = _isPlaying&#10;&#10;    private val _trackList = MutableStateFlow&lt;List&lt;MusicTrack&gt;&gt;(emptyList())&#10;    val trackList: StateFlow&lt;List&lt;MusicTrack&gt;&gt; = _trackList&#10;&#10;    private var clip: Any? = null&#10;    private val mp3Player = SimpleMp3Player()&#10;&#10;    // Добавляем доступ к состоянию MP3 плеера&#10;    val playerPosition = mp3Player.position&#10;    val playerDuration = mp3Player.duration&#10;    val playerIsPlaying = mp3Player.isPlaying&#10;&#10;    fun setTrackList(tracks: List&lt;MusicTrack&gt;) {&#10;        _trackList.value = tracks&#10;    }&#10;&#10;    fun navigateTo(screen: Screen) {&#10;        _currentScreen.value = screen&#10;    }&#10;&#10;    fun playPause() {&#10;        try {&#10;            val currentTrack = _currentTrack.value&#10;            if (currentTrack != null &amp;&amp; (currentTrack.filePath.startsWith(&quot;http&quot;) || currentTrack.filePath.lowercase().endsWith(&quot;.mp3&quot;))) {&#10;                // MP3 плеер&#10;                if (mp3Player.isPlaying.value) {&#10;                    mp3Player.pause()&#10;                    _isPlaying.value = false&#10;                } else {&#10;                    mp3Player.play()&#10;                    _isPlaying.value = true&#10;                }&#10;            } else {&#10;                // Стандартный клип для других форматов&#10;                val currentClip = clip as? javax.sound.sampled.Clip&#10;                if (currentClip != null) {&#10;                    if (_isPlaying.value) {&#10;                        currentClip.stop()&#10;                        _isPlaying.value = false&#10;                    } else {&#10;                        currentClip.start()&#10;                        _isPlaying.value = true&#10;                    }&#10;                } else {&#10;                    // Если нет активного плеера, попробуем воспроизвести текущий трек&#10;                    currentTrack?.let { track -&gt;&#10;                        playTrack(track)&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка управления воспроизведением: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    fun seekTo(positionMs: Long) {&#10;        mp3Player.seekTo(positionMs)&#10;    }&#10;&#10;    fun selectTrack(track: MusicTrack) {&#10;        _currentTrack.value = track&#10;        _currentScreen.value = Screen.Player&#10;        playTrack(track)&#10;    }&#10;&#10;    fun playNextTrack() {&#10;        val tracks = _trackList.value&#10;        val currentTrack = _currentTrack.value&#10;        if (tracks.isNotEmpty() &amp;&amp; currentTrack != null) {&#10;            val currentIndex = tracks.indexOf(currentTrack)&#10;            if (currentIndex != -1 &amp;&amp; currentIndex &lt; tracks.size - 1) {&#10;                selectTrack(tracks[currentIndex + 1])&#10;            }&#10;        }&#10;    }&#10;&#10;    fun playPreviousTrack() {&#10;        val tracks = _trackList.value&#10;        val currentTrack = _currentTrack.value&#10;        if (tracks.isNotEmpty() &amp;&amp; currentTrack != null) {&#10;            val currentIndex = tracks.indexOf(currentTrack)&#10;            if (currentIndex &gt; 0) {&#10;                selectTrack(tracks[currentIndex - 1])&#10;            }&#10;        }&#10;    }&#10;&#10;    fun playTrack(track: MusicTrack) {&#10;        coroutineScope.launch {&#10;            try {&#10;                println(&quot;Попытка воспроизвести трек: ${track.title}&quot;)&#10;                println(&quot;Путь к файлу: ${track.filePath}&quot;)&#10;&#10;                // Остановить предыдущий трек если играет&#10;                stopPlayback()&#10;&#10;                when {&#10;                    track.filePath.startsWith(&quot;http://&quot;) || track.filePath.startsWith(&quot;https://&quot;) -&gt; {&#10;                        println(&quot;Загрузка MP3 по URL...&quot;)&#10;                        if (mp3Player.loadTrack(track.filePath)) {&#10;                            mp3Player.play()&#10;                            _isPlaying.value = true&#10;                            println(&quot;Воспроизведение URL MP3 началось&quot;)&#10;                        } else {&#10;                            throw Exception(&quot;Не удалось загрузить MP3 по URL&quot;)&#10;                        }&#10;                    }&#10;                    track.filePath.lowercase().endsWith(&quot;.mp3&quot;) -&gt; {&#10;                        println(&quot;Загрузка локального MP3 файла...&quot;)&#10;                        if (mp3Player.loadTrack(track.filePath)) {&#10;                            mp3Player.play()&#10;                            _isPlaying.value = true&#10;                            println(&quot;Воспроизведение локального MP3 началось&quot;)&#10;                        } else {&#10;                            throw Exception(&quot;Не удалось загрузить локальный MP3&quot;)&#10;                        }&#10;                    }&#10;                    else -&gt; {&#10;                        println(&quot;Загрузка других форматов...&quot;)&#10;                        val audioFile = File(track.filePath)&#10;                        if (!audioFile.exists()) {&#10;                            throw Exception(&quot;Файл не найден: ${track.filePath}&quot;)&#10;                        }&#10;&#10;                        val audioStream = AudioSystem.getAudioInputStream(audioFile)&#10;                        println(&quot;Аудиопоток получен, создаём клип...&quot;)&#10;                        val newClip = AudioSystem.getClip()&#10;                        newClip.open(audioStream)&#10;&#10;                        println(&quot;Запускаем воспроизведение...&quot;)&#10;                        newClip.start()&#10;                        this@AppState.clip = newClip&#10;                        _isPlaying.value = true&#10;                        println(&quot;Воспроизведение началось успешно!&quot;)&#10;                    }&#10;                }&#10;&#10;            } catch (e: Exception) {&#10;                println(&quot;Ошибка воспроизведения: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;                _isPlaying.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun stopPlayback() {&#10;        try {&#10;            // Остановить MP3 плеер&#10;            mp3Player.stop()&#10;&#10;            // Остановить стандартный клип&#10;            (clip as? javax.sound.sampled.Clip)?.let {&#10;                it.stop()&#10;                it.close()&#10;                clip = null&#10;            }&#10;&#10;            _isPlaying.value = false&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка остановки воспроизведения: ${e.message}&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun rememberAppState(&#10;    windowState: WindowState = WindowState(),&#10;    coroutineScope: CoroutineScope = rememberCoroutineScope()&#10;): AppState {&#10;    return remember(windowState, coroutineScope) {&#10;        AppState(windowState, coroutineScope)&#10;    }&#10;}&#10;&#10;data class MusicTrack(&#10;    val id: Long,&#10;    val title: String,&#10;    val artist: String,&#10;    val album: String,&#10;    val duration: Long,&#10;    val filePath: String,&#10;    val coverArtPath: String? = null&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/audio/AdvancedMp3Player.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/audio/AdvancedMp3Player.kt" />
              <option name="originalContent" value="package com.example.musicplayer.audio&#10;&#10;import kotlinx.coroutines.*&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import java.io.BufferedInputStream&#10;import java.io.File&#10;import java.io.FileInputStream&#10;import java.net.URL&#10;import javazoom.jl.decoder.*&#10;import javazoom.jl.player.AudioDevice&#10;import javazoom.jl.player.FactoryRegistry&#10;import javax.sound.sampled.*&#10;&#10;/**&#10; * Продвинутый MP3 плеер с поддержкой паузы, перемотки и прогресса&#10; */&#10;class AdvancedMp3Player {&#10;    private val _isPlaying = MutableStateFlow(false)&#10;    val isPlaying: StateFlow&lt;Boolean&gt; = _isPlaying&#10;&#10;    private val _position = MutableStateFlow(0L) // позиция в миллисекундах&#10;    val position: StateFlow&lt;Long&gt; = _position&#10;&#10;    private val _duration = MutableStateFlow(0L) // длительность в миллисекундах&#10;    val duration: StateFlow&lt;Long&gt; = _duration&#10;&#10;    private var bitstream: Bitstream? = null&#10;    private var decoder: Decoder? = null&#10;    private var audio: AudioDevice? = null&#10;    private var playbackJob: Job? = null&#10;    private var inputStream: BufferedInputStream? = null&#10;&#10;    private var pausePosition = 0 // позиция в кадрах для возобновления&#10;    private var totalFrames = 0&#10;    private var frameTime = 0L // время одного кадра в мс&#10;&#10;    fun loadTrack(filePath: String): Boolean {&#10;        return try {&#10;            stop()&#10;&#10;            inputStream = when {&#10;                filePath.startsWith(&quot;http://&quot;) || filePath.startsWith(&quot;https://&quot;) -&gt; {&#10;                    BufferedInputStream(URL(filePath).openStream())&#10;                }&#10;                else -&gt; {&#10;                    val file = File(filePath)&#10;                    if (!file.exists()) throw Exception(&quot;Файл не найден: $filePath&quot;)&#10;                    BufferedInputStream(FileInputStream(file))&#10;                }&#10;            }&#10;&#10;            bitstream = Bitstream(inputStream!!)&#10;            decoder = Decoder()&#10;            audio = FactoryRegistry.systemRegistry().createAudioDevice()&#10;&#10;            // Читаем первый кадр для получения информации о формате&#10;            val header = bitstream!!.readFrame() ?: throw Exception(&quot;Не удалось прочитать заголовок&quot;)&#10;            val sampleBuffer = decoder!!.decodeFrame(header, bitstream!!) as SampleBuffer&#10;&#10;            // Инициализируем аудио устройство&#10;            audio!!.open(decoder!!)&#10;&#10;            // Вычисляем приблизительную длительность&#10;            val bitrate = header.bitrate()&#10;            val sampleRate = sampleBuffer.sampleFrequency&#10;            frameTime = (1000L * sampleBuffer.bufferLength) / sampleRate&#10;&#10;            // Возвращаем кадр обратно (упрощение - в реальности нужно переоткрыть поток)&#10;            bitstream!!.closeFrame()&#10;&#10;            resetStream(filePath)&#10;&#10;            pausePosition = 0&#10;            _position.value = 0L&#10;            _duration.value = estimateDuration(filePath, bitrate)&#10;&#10;            true&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка загрузки трека: ${e.message}&quot;)&#10;            e.printStackTrace()&#10;            false&#10;        }&#10;    }&#10;&#10;    private fun resetStream(filePath: String) {&#10;        try {&#10;            inputStream?.close()&#10;            bitstream?.close()&#10;&#10;            inputStream = when {&#10;                filePath.startsWith(&quot;http://&quot;) || filePath.startsWith(&quot;https://&quot;) -&gt; {&#10;                    BufferedInputStream(URL(filePath).openStream())&#10;                }&#10;                else -&gt; BufferedInputStream(FileInputStream(File(filePath)))&#10;            }&#10;&#10;            bitstream = Bitstream(inputStream!!)&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка перезапуска потока: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private fun estimateDuration(filePath: String, bitrate: Int): Long {&#10;        return try {&#10;            when {&#10;                filePath.startsWith(&quot;http://&quot;) || filePath.startsWith(&quot;https://&quot;) -&gt; {&#10;                    // Для URL предполагаем 30 секунд (preview)&#10;                    30000L&#10;                }&#10;                else -&gt; {&#10;                    val file = File(filePath)&#10;                    val fileSizeInBytes = file.length()&#10;                    val fileSizeInBits = fileSizeInBytes * 8&#10;                    val durationInSeconds = fileSizeInBits / bitrate&#10;                    durationInSeconds * 1000L&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            30000L // fallback&#10;        }&#10;    }&#10;&#10;    fun play() {&#10;        if (_isPlaying.value) return&#10;&#10;        playbackJob = CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                _isPlaying.value = true&#10;&#10;                // Пропускаем кадры до позиции паузы&#10;                repeat(pausePosition) {&#10;                    val header = bitstream?.readFrame()&#10;                    if (header != null) {&#10;                        bitstream?.closeFrame()&#10;                    }&#10;                }&#10;&#10;                var currentFrame = pausePosition&#10;&#10;                while (_isPlaying.value &amp;&amp; isActive) {&#10;                    val header = bitstream?.readFrame()&#10;                    if (header == null) {&#10;                        // Конец трека&#10;                        break&#10;                    }&#10;&#10;                    try {&#10;                        val output = decoder?.decodeFrame(header, bitstream!!)&#10;                        if (output is SampleBuffer) {&#10;                            val bufferData = output.buffer&#10;                            val bufferLength = output.bufferLength&#10;&#10;                            // Проверяем границы массива перед записью&#10;                            if (bufferData != null &amp;&amp; bufferLength &gt; 0 &amp;&amp; bufferLength &lt;= bufferData.size) {&#10;                                audio?.write(bufferData, 0, bufferLength)&#10;                                currentFrame++&#10;&#10;                                // Обновляем позицию&#10;                                _position.value = currentFrame * frameTime&#10;                            } else {&#10;                                println(&quot;Предупреждение: неверный размер буфера: $bufferLength/${bufferData?.size}&quot;)&#10;                            }&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        println(&quot;Ошибка декодирования кадра: ${e.message}&quot;)&#10;                        // Продолжаем со следующим кадром&#10;                    }&#10;&#10;                    bitstream?.closeFrame()&#10;&#10;                    // Небольшая задержка для предотвращения перегрузки CPU&#10;                    delay(10) // Увеличиваем задержку для стабильности&#10;                }&#10;&#10;                pausePosition = currentFrame&#10;&#10;            } catch (e: Exception) {&#10;                println(&quot;Ошибка воспроизведения: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;            } finally {&#10;                _isPlaying.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun pause() {&#10;        _isPlaying.value = false&#10;        playbackJob?.cancel()&#10;    }&#10;&#10;    fun stop() {&#10;        _isPlaying.value = false&#10;        playbackJob?.cancel()&#10;&#10;        try {&#10;            audio?.close()&#10;            bitstream?.close()&#10;            inputStream?.close()&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка остановки: ${e.message}&quot;)&#10;        }&#10;&#10;        pausePosition = 0&#10;        _position.value = 0L&#10;    }&#10;&#10;    fun seekTo(positionMs: Long) {&#10;        val targetFrame = (positionMs / frameTime).toInt()&#10;        pausePosition = targetFrame.coerceAtLeast(0)&#10;        _position.value = pausePosition * frameTime&#10;&#10;        // Если играет, перезапускаем с новой позиции&#10;        if (_isPlaying.value) {&#10;            pause()&#10;            // Небольшая задержка перед возобновлением&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(100)&#10;                play()&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.audio&#10;&#10;import kotlinx.coroutines.*&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import java.io.BufferedInputStream&#10;import java.io.File&#10;import java.io.FileInputStream&#10;import java.net.URL&#10;import javazoom.jl.player.Player&#10;&#10;/**&#10; * Упрощенный MP3 плеер для стабильного воспроизведения&#10; */&#10;class SimpleMp3Player {&#10;    private val _isPlaying = MutableStateFlow(false)&#10;    val isPlaying: StateFlow&lt;Boolean&gt; = _isPlaying&#10;&#10;    private val _position = MutableStateFlow(0L) // позиция в миллисекундах&#10;    val position: StateFlow&lt;Long&gt; = _position&#10;&#10;    private val _duration = MutableStateFlow(0L) // длительность в миллисекундах&#10;    val duration: StateFlow&lt;Long&gt; = _duration&#10;&#10;    private var player: Player? = null&#10;    private var playbackJob: Job? = null&#10;    private var startTime = 0L&#10;    private var pausedPosition = 0L&#10;    private var currentFilePath: String? = null&#10;&#10;    fun loadTrack(filePath: String): Boolean {&#10;        return try {&#10;            stop()&#10;            currentFilePath = filePath&#10;&#10;            // Устанавливаем примерную длительность&#10;            _duration.value = when {&#10;                filePath.startsWith(&quot;http://&quot;) || filePath.startsWith(&quot;https://&quot;) -&gt; 30000L // 30 сек для preview&#10;                else -&gt; {&#10;                    try {&#10;                        val file = File(filePath)&#10;                        if (file.exists()) {&#10;                            // Приблизительная оценка по размеру файла (128 kbps)&#10;                            val fileSizeBytes = file.length()&#10;                            val estimatedDurationMs = (fileSizeBytes * 8) / (128 * 1000 / 8) * 1000&#10;                            estimatedDurationMs&#10;                        } else {&#10;                            30000L&#10;                        }&#10;                    } catch (e: Exception) {&#10;                        30000L&#10;                    }&#10;                }&#10;            }&#10;&#10;            _position.value = 0L&#10;            pausedPosition = 0L&#10;&#10;            true&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка загрузки трека: ${e.message}&quot;)&#10;            false&#10;        }&#10;    }&#10;&#10;    fun play() {&#10;        if (_isPlaying.value) return&#10;&#10;        val filePath = currentFilePath ?: return&#10;&#10;        playbackJob = CoroutineScope(Dispatchers.IO).launch {&#10;            try {&#10;                _isPlaying.value = true&#10;                startTime = System.currentTimeMillis() - pausedPosition&#10;&#10;                // Создаем новый плеер&#10;                val inputStream = when {&#10;                    filePath.startsWith(&quot;http://&quot;) || filePath.startsWith(&quot;https://&quot;) -&gt; {&#10;                        BufferedInputStream(URL(filePath).openStream())&#10;                    }&#10;                    else -&gt; {&#10;                        val file = File(filePath)&#10;                        if (!file.exists()) throw Exception(&quot;Файл не найден: $filePath&quot;)&#10;                        BufferedInputStream(FileInputStream(file))&#10;                    }&#10;                }&#10;&#10;                player = Player(inputStream)&#10;&#10;                // Обновляем позицию во время воспроизведения&#10;                val positionUpdateJob = launch {&#10;                    while (_isPlaying.value &amp;&amp; isActive) {&#10;                        val elapsed = System.currentTimeMillis() - startTime&#10;                        _position.value = elapsed.coerceAtMost(_duration.value)&#10;                        delay(100) // Обновляем каждые 100мс&#10;                    }&#10;                }&#10;&#10;                // Воспроизведение (блокирующий вызов)&#10;                player?.play()&#10;&#10;                positionUpdateJob.cancel()&#10;&#10;            } catch (e: Exception) {&#10;                println(&quot;Ошибка воспроизведения: ${e.message}&quot;)&#10;            } finally {&#10;                _isPlaying.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    fun pause() {&#10;        pausedPosition = _position.value&#10;        stop()&#10;    }&#10;&#10;    fun stop() {&#10;        _isPlaying.value = false&#10;        playbackJob?.cancel()&#10;&#10;        try {&#10;            player?.close()&#10;            player = null&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка остановки: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    fun seekTo(positionMs: Long) {&#10;        // Для упрощения - перезапускаем трек с начала&#10;        // В реальном плеере нужно более сложное seeking&#10;        pausedPosition = 0L&#10;        _position.value = 0L&#10;&#10;        if (_isPlaying.value) {&#10;            stop()&#10;            // Небольшая задержка перед перезапуском&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(200)&#10;                play()&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/data/deezer/DeezerApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/data/deezer/DeezerApi.kt" />
              <option name="updatedContent" value="package com.example.musicplayer.data.deezer&#10;&#10;import com.example.musicplayer.MusicTrack as AppMusicTrack&#10;import io.ktor.client.*&#10;import io.ktor.client.call.*&#10;import io.ktor.client.engine.cio.*&#10;import io.ktor.client.plugins.contentnegotiation.*&#10;import io.ktor.client.request.*&#10;import io.ktor.serialization.kotlinx.json.*&#10;import kotlinx.serialization.SerialName&#10;import kotlinx.serialization.Serializable&#10;import kotlinx.serialization.json.Json&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;&#10;/**&#10; * Поиск треков через Deezer API (публичный, без ключа для базовых запросов).&#10; * Документация: https://developers.deezer.com/api/search&#10; * Замечание: preview (30 сек) доступен в поле preview.&#10; */&#10;object DeezerApi {&#10;    private val json = Json { ignoreUnknownKeys = true }&#10;&#10;    private val client: HttpClient by lazy {&#10;        HttpClient(CIO) {&#10;            install(ContentNegotiation) { json(json) }&#10;        }&#10;    }&#10;&#10;    suspend fun searchTracks(query: String, limit: Int = 25): List&lt;DeezerTrack&gt; {&#10;        if (query.isBlank()) return emptyList()&#10;        val encoded = URLEncoder.encode(query.trim(), StandardCharsets.UTF_8)&#10;        val url = &quot;https://api.deezer.com/search?q=$encoded&amp;limit=$limit&quot;&#10;        val response: DeezerSearchResponse = client.get(url).body()&#10;        return response.data&#10;    }&#10;}&#10;&#10;@Serializable&#10;data class DeezerSearchResponse(&#10;    @SerialName(&quot;data&quot;) val data: List&lt;DeezerTrack&gt; = emptyList(),&#10;    @SerialName(&quot;total&quot;) val total: Int? = null,&#10;    @SerialName(&quot;next&quot;) val next: String? = null&#10;)&#10;&#10;@Serializable&#10;data class DeezerTrack(&#10;    @SerialName(&quot;id&quot;) val id: Long,&#10;    @SerialName(&quot;title&quot;) val title: String? = null,&#10;    @SerialName(&quot;duration&quot;) val durationSec: Long? = null,&#10;    @SerialName(&quot;preview&quot;) val previewUrl: String? = null,&#10;    @SerialName(&quot;artist&quot;) val artist: DeezerArtist? = null,&#10;    @SerialName(&quot;album&quot;) val album: DeezerAlbum? = null&#10;)&#10;&#10;@Serializable&#10;data class DeezerArtist(@SerialName(&quot;name&quot;) val name: String? = null)&#10;&#10;@Serializable&#10;data class DeezerAlbum(&#10;    @SerialName(&quot;title&quot;) val title: String? = null,&#10;    @SerialName(&quot;cover_medium&quot;) val coverMedium: String? = null,&#10;    @SerialName(&quot;cover_big&quot;) val coverBig: String? = null&#10;)&#10;&#10;// Маппер в доменную модель&#10;fun DeezerTrack.toAppMusicTrack(): AppMusicTrack = AppMusicTrack(&#10;    id = id,&#10;    title = title ?: &quot;Unknown&quot;,&#10;    artist = artist?.name ?: &quot;Unknown&quot;,&#10;    album = album?.title ?: &quot;&quot;,&#10;    duration = (durationSec ?: 0L) * 1000L,&#10;    filePath = previewUrl ?: &quot;&quot;,&#10;    coverArtPath = album?.coverBig ?: album?.coverMedium&#10;)&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/data/jamendo/JamendoApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/data/jamendo/JamendoApi.kt" />
              <option name="updatedContent" value="package com.example.musicplayer.data.jamendo&#10;&#10;import com.example.musicplayer.MusicTrack as AppMusicTrack&#10;import io.ktor.client.*&#10;import io.ktor.client.call.*&#10;import io.ktor.client.engine.cio.*&#10;import io.ktor.client.plugins.contentnegotiation.*&#10;import io.ktor.client.request.*&#10;import io.ktor.serialization.kotlinx.json.*&#10;import kotlinx.serialization.SerialName&#10;import kotlinx.serialization.Serializable&#10;import kotlinx.serialization.json.Json&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;&#10;/**&#10; * Jamendo API для получения полных треков с Creative Commons лицензией&#10; * Регистрация: https://developer.jamendo.com/&#10; */&#10;object JamendoApi {&#10;    private val json = Json { ignoreUnknownKeys = true }&#10;    &#10;    private val client: HttpClient by lazy {&#10;        HttpClient(CIO) {&#10;            install(ContentNegotiation) { json(json) }&#10;        }&#10;    }&#10;&#10;    // Получить бесплатный client_id: https://developer.jamendo.com/&#10;    private const val CLIENT_ID = &quot;56d30c95&quot; // Демо ключ&#10;&#10;    suspend fun searchTracks(query: String, limit: Int = 10): List&lt;JamendoTrack&gt; {&#10;        if (query.isBlank()) return emptyList()&#10;        val encoded = URLEncoder.encode(query.trim(), StandardCharsets.UTF_8)&#10;        val url = &quot;https://api.jamendo.com/v3.0/tracks/?client_id=$CLIENT_ID&amp;format=json&amp;limit=$limit&amp;search=$encoded&amp;include=musicinfo&amp;audioformat=mp32&quot;&#10;        &#10;        return try {&#10;            val response: JamendoResponse = client.get(url).body()&#10;            response.results&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка Jamendo API: ${e.message}&quot;)&#10;            emptyList()&#10;        }&#10;    }&#10;&#10;    suspend fun getPopularTracks(limit: Int = 20): List&lt;JamendoTrack&gt; {&#10;        val url = &quot;https://api.jamendo.com/v3.0/tracks/?client_id=$CLIENT_ID&amp;format=json&amp;limit=$limit&amp;order=popularity_total&amp;include=musicinfo&amp;audioformat=mp32&quot;&#10;        &#10;        return try {&#10;            val response: JamendoResponse = client.get(url).body()&#10;            response.results&#10;        } catch (e: Exception) {&#10;            println(&quot;Ошибка получения популярных треков: ${e.message}&quot;)&#10;            emptyList()&#10;        }&#10;    }&#10;}&#10;&#10;@Serializable&#10;data class JamendoResponse(&#10;    @SerialName(&quot;results&quot;) val results: List&lt;JamendoTrack&gt; = emptyList()&#10;)&#10;&#10;@Serializable&#10;data class JamendoTrack(&#10;    @SerialName(&quot;id&quot;) val id: Long,&#10;    @SerialName(&quot;name&quot;) val name: String,&#10;    @SerialName(&quot;duration&quot;) val duration: Int? = null, // в секундах&#10;    @SerialName(&quot;artist_name&quot;) val artistName: String,&#10;    @SerialName(&quot;album_name&quot;) val albumName: String? = null,&#10;    @SerialName(&quot;audio&quot;) val audio: String? = null, // URL полного трека&#10;    @SerialName(&quot;audiodownload&quot;) val audioDownload: String? = null,&#10;    @SerialName(&quot;image&quot;) val image: String? = null&#10;)&#10;&#10;// Маппер в доменную модель&#10;fun JamendoTrack.toAppMusicTrack(): AppMusicTrack = AppMusicTrack(&#10;    id = id,&#10;    title = name,&#10;    artist = artistName,&#10;    album = albumName ?: &quot;&quot;,&#10;    duration = (duration ?: 0) * 1000L, // секунды -&gt; миллисекунды&#10;    filePath = audio ?: audioDownload ?: &quot;&quot;, // Полный MP3 файл!&#10;    coverArtPath = image&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/AlbumCover.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/AlbumCover.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material.MaterialTheme&#10;import androidx.compose.material.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.ImageBitmap&#10;import androidx.compose.ui.graphics.asImageBitmap&#10;import androidx.compose.ui.layout.ContentScale&#10;import com.example.musicplayer.MusicTrack&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import java.awt.image.BufferedImage&#10;import java.io.ByteArrayOutputStream&#10;import java.io.File&#10;import java.net.URL&#10;import javax.imageio.ImageIO&#10;import org.jetbrains.skia.Image as SkiaImage&#10;&#10;@Composable&#10;fun AlbumCover(track: MusicTrack, modifier: Modifier = Modifier) {&#10;    var imageBitmap by remember(track.coverArtPath) { mutableStateOf&lt;ImageBitmap?&gt;(null) }&#10;    var loadError by remember(track.coverArtPath) { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(track.coverArtPath) {&#10;        val path = track.coverArtPath&#10;        if (path.isNullOrBlank()) {&#10;            loadError = true&#10;            return@LaunchedEffect&#10;        }&#10;        val buffered = withContext(Dispatchers.IO) {&#10;            runCatching {&#10;                when {&#10;                    path.startsWith(&quot;http://&quot;) || path.startsWith(&quot;https://&quot;) -&gt; ImageIO.read(URL(path))&#10;                    else -&gt; ImageIO.read(File(path))&#10;                }&#10;            }.getOrNull()&#10;        }&#10;        if (buffered != null) {&#10;            imageBitmap = buffered.toImageBitmap()&#10;        } else {&#10;            loadError = true&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .clip(MaterialTheme.shapes.large)&#10;            .background(MaterialTheme.colors.primary.copy(alpha = 0.2f)),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        when {&#10;            imageBitmap != null -&gt; Image(&#10;                bitmap = imageBitmap!!,&#10;                contentDescription = &quot;${track.album} cover&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier.fillMaxSize()&#10;            )&#10;            loadError -&gt; Text(&#10;                text = track.title.take(2).uppercase(),&#10;                style = MaterialTheme.typography.h3,&#10;                color = MaterialTheme.colors.primary&#10;            )&#10;            else -&gt; Text(&#10;                text = &quot;…&quot;,&#10;                style = MaterialTheme.typography.h4,&#10;                color = MaterialTheme.colors.primary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;private fun BufferedImage.toImageBitmap(): ImageBitmap {&#10;    val baos = ByteArrayOutputStream()&#10;    ImageIO.write(this, &quot;png&quot;, baos)&#10;    return SkiaImage.makeFromEncoded(baos.toByteArray()).toComposeImageBitmap()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material.MaterialTheme&#10;import androidx.compose.material.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.ImageBitmap&#10;import androidx.compose.ui.graphics.asImageBitmap&#10;import androidx.compose.ui.layout.ContentScale&#10;import com.example.musicplayer.MusicTrack&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import java.awt.image.BufferedImage&#10;import java.io.ByteArrayOutputStream&#10;import java.io.File&#10;import java.net.URL&#10;import javax.imageio.ImageIO&#10;import org.jetbrains.skia.Image as SkiaImage&#10;&#10;@Composable&#10;fun AlbumCover(track: MusicTrack, modifier: Modifier = Modifier) {&#10;    var imageBitmap by remember(track.coverArtPath) { mutableStateOf&lt;ImageBitmap?&gt;(null) }&#10;    var loadError by remember(track.coverArtPath) { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(track.coverArtPath) {&#10;        val path = track.coverArtPath&#10;        if (path.isNullOrBlank()) {&#10;            loadError = true&#10;            return@LaunchedEffect&#10;        }&#10;        val buffered = withContext(Dispatchers.IO) {&#10;            runCatching {&#10;                when {&#10;                    path.startsWith(&quot;http://&quot;) || path.startsWith(&quot;https://&quot;) -&gt; ImageIO.read(URL(path))&#10;                    else -&gt; ImageIO.read(File(path))&#10;                }&#10;            }.getOrNull()&#10;        }&#10;        if (buffered != null) {&#10;            imageBitmap = buffered.toImageBitmap()&#10;        } else {&#10;            loadError = true&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = modifier&#10;            .clip(MaterialTheme.shapes.large)&#10;            .background(MaterialTheme.colors.primary.copy(alpha = 0.2f)),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        when {&#10;            imageBitmap != null -&gt; Image(&#10;                bitmap = imageBitmap!!,&#10;                contentDescription = &quot;${track.album} cover&quot;,&#10;                contentScale = ContentScale.Crop,&#10;                modifier = Modifier.fillMaxSize()&#10;            )&#10;            loadError -&gt; Text(&#10;                text = track.title.take(2).uppercase(),&#10;                style = MaterialTheme.typography.h3,&#10;                color = MaterialTheme.colors.primary&#10;            )&#10;            else -&gt; Text(&#10;                text = &quot;…&quot;,&#10;                style = MaterialTheme.typography.h4,&#10;                color = MaterialTheme.colors.primary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;private fun BufferedImage.toImageBitmap(): ImageBitmap {&#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    val baos = ByteArrayOutputStream()&#10;    ImageIO.write(this, &quot;png&quot;, baos)&#10;    return SkiaImage.makeFromEncoded(baos.toByteArray()).asImageBitmap()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/BottomPlayerBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/BottomPlayerBar.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Pause&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material.icons.filled.SkipNext&#10;import androidx.compose.material.icons.filled.SkipPrevious&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.MusicTrack&#10;&#10;@Composable&#10;fun BottomPlayerBar(&#10;    track: MusicTrack,&#10;    isPlaying: Boolean,&#10;    onPlayPauseClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Surface(&#10;        elevation = 8.dp,&#10;        modifier = modifier&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(MaterialTheme.colors.surface)&#10;                .padding(8.dp)&#10;        ) {&#10;            // Progress bar&#10;            Slider(&#10;                value = 0.3f, // TODO: Replace with actual progress&#10;                onValueChange = {},&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 8.dp)&#10;            )&#10;            &#10;            // Track info&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp, vertical = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Album art placeholder&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(50.dp)&#10;                        .clip(RoundedCornerShape(4.dp))&#10;                        .background(MaterialTheme.colors.primary.copy(alpha = 0.2f)),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = track.title.take(2).uppercase(),&#10;                        style = MaterialTheme.typography.h6,&#10;                        color = MaterialTheme.colors.primary&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                // Track details&#10;                Column(&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = track.title,&#10;                        style = MaterialTheme.typography.subtitle1,&#10;                        maxLines = 1,&#10;                        color = MaterialTheme.colors.onSurface&#10;                    )&#10;                    Text(&#10;                        text = track.artist,&#10;                        style = MaterialTheme.typography.caption,&#10;                        maxLines = 1,&#10;                        color = MaterialTheme.colors.onSurface.copy(alpha = 0.7f)&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Playback controls&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                // Previous button&#10;                IconButton(&#10;                    onClick = { /* TODO: Skip to previous */ },&#10;                    modifier = Modifier.size(48.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.SkipPrevious,&#10;                        contentDescription = &quot;Previous&quot;,&#10;                        tint = MaterialTheme.colors.onSurface&#10;                    )&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                &#10;                // Play/Pause button&#10;                IconButton(&#10;                    onClick = onPlayPauseClick,&#10;                    modifier = Modifier&#10;                        .size(56.dp)&#10;                        .clip(CircleShape)&#10;                        .background(MaterialTheme.colors.primary)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (isPlaying) Icons.Default.Pause else Icons.Default.PlayArrow,&#10;                        contentDescription = if (isPlaying) &quot;Pause&quot; else &quot;Play&quot;,&#10;                        tint = Color.White,&#10;                        modifier = Modifier.size(32.dp)&#10;                    )&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                &#10;                // Next button&#10;                IconButton(&#10;                    onClick = { /* TODO: Skip to next */ },&#10;                    modifier = Modifier.size(48.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.SkipNext,&#10;                        contentDescription = &quot;Next&quot;,&#10;                        tint = MaterialTheme.colors.onSurface&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.MusicTrack&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;&#10;@Composable&#10;fun BottomPlayerBar(&#10;    track: MusicTrack,&#10;    isPlaying: Boolean,&#10;    onPlayPauseClick: () -&gt; Unit,&#10;    onPreviousClick: () -&gt; Unit,&#10;    onNextClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;        shape = RoundedCornerShape(20.dp),&#10;        elevation = 12.dp,&#10;        backgroundColor = Color.White&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(&#10;                    brush = Brush.horizontalGradient(&#10;                        colors = listOf(&#10;                            Color.White,&#10;                            MusicPlayerColors.Purple.copy(alpha = 0.05f)&#10;                        )&#10;                    )&#10;                )&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Иконка трека&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(48.dp)&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        brush = Brush.linearGradient(&#10;                            colors = listOf(&#10;                                MusicPlayerColors.Purple,&#10;                                MusicPlayerColors.Pink&#10;                            )&#10;                        )&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.MusicNote,&#10;                    contentDescription = null,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            // Информация о треке&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = track.title,&#10;                    style = MaterialTheme.typography.body1,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MusicPlayerColors.DarkGray,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;                Text(&#10;                    text = track.artist,&#10;                    style = MaterialTheme.typography.body2,&#10;                    color = MusicPlayerColors.MediumGray,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            // Кнопки управления&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                // Предыдущий трек&#10;                IconButton(&#10;                    onClick = onPreviousClick,&#10;                    modifier = Modifier&#10;                        .size(40.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color.Black.copy(alpha = 0.05f))&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.SkipPrevious,&#10;                        contentDescription = &quot;Previous&quot;,&#10;                        tint = MusicPlayerColors.DarkGray,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;&#10;                // Play/Pause&#10;                IconButton(&#10;                    onClick = onPlayPauseClick,&#10;                    modifier = Modifier&#10;                        .size(48.dp)&#10;                        .clip(CircleShape)&#10;                        .background(&#10;                            brush = Brush.linearGradient(&#10;                                colors = listOf(&#10;                                    MusicPlayerColors.Purple,&#10;                                    MusicPlayerColors.Pink&#10;                                )&#10;                            )&#10;                        )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = if (isPlaying) Icons.Default.Pause else Icons.Default.PlayArrow,&#10;                        contentDescription = if (isPlaying) &quot;Pause&quot; else &quot;Play&quot;,&#10;                        tint = Color.White,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                }&#10;&#10;                // Следующий трек&#10;                IconButton(&#10;                    onClick = onNextClick,&#10;                    modifier = Modifier&#10;                        .size(40.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color.Black.copy(alpha = 0.05f))&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.SkipNext,&#10;                        contentDescription = &quot;Next&quot;,&#10;                        tint = MusicPlayerColors.DarkGray,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/PlaybackProgressBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/PlaybackProgressBar.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun PlaybackProgressBar(&#10;    currentPosition: Float,&#10;    duration: Float,&#10;    onPositionChange: (Float) -&gt; Unit&#10;) {&#10;    Column(modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp)) {&#10;        Slider(&#10;            value = currentPosition,&#10;            onValueChange = onPositionChange,&#10;            valueRange = 0f..duration.coerceAtLeast(1f),&#10;            colors = SliderDefaults.colors(thumbColor = MaterialTheme.colors.primary)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = formatTime(currentPosition.toInt()),&#10;                style = MaterialTheme.typography.caption&#10;            )&#10;            Text(&#10;                text = formatTime(duration.toInt()),&#10;                style = MaterialTheme.typography.caption&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatTime(seconds: Int): String {&#10;    val minutes = seconds / 60&#10;    val remainingSeconds = seconds % 60&#10;    return &quot;%d:%02d&quot;.format(minutes, remainingSeconds)&#10;}" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;&#10;@Composable&#10;fun PlaybackProgressBar(&#10;    progress: Float,&#10;    onSeek: (Float) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(modifier = modifier) {&#10;        Slider(&#10;            value = progress.coerceIn(0f, 1f),&#10;            onValueChange = onSeek,&#10;            colors = SliderDefaults.colors(&#10;                thumbColor = Color.White,&#10;                activeTrackColor = MusicPlayerColors.Purple,&#10;                inactiveTrackColor = Color.White.copy(alpha = 0.3f)&#10;            ),&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(6.dp)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/TopBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/TopBar.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.Screen&#10;&#10;// List of all screens for the top navigation&#10;private val screens = listOf(&#10;    Screen.Library,&#10;    Screen.Search,&#10;    Screen.Player,&#10;    Screen.Settings&#10;)&#10;&#10;@Composable&#10;fun TopBar(&#10;    currentScreen: Screen,&#10;    onNavigationClick: (Screen) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Surface(&#10;        elevation = 4.dp,&#10;        modifier = modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.8f)&#10;                .padding(vertical = 8.dp)&#10;                .background(&#10;                    color = MaterialTheme.colors.surface,&#10;                    shape = RoundedCornerShape(25.dp)&#10;                )&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            screens.forEach { screen -&gt;&#10;                NavigationButton(&#10;                    text = screen.name,&#10;                    isSelected = currentScreen == screen,&#10;                    onClick = { onNavigationClick(screen) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NavigationButton(&#10;    text: String,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Button(&#10;        onClick = onClick,&#10;        modifier = modifier.padding(horizontal = 4.dp),&#10;        shape = RoundedCornerShape(15.dp),&#10;        elevation = null,&#10;        colors = ButtonDefaults.buttonColors(&#10;            backgroundColor = if (isSelected) {&#10;                MaterialTheme.colors.primary.copy(alpha = 0.2f)&#10;            } else {&#10;                Color.Transparent&#10;            },&#10;            contentColor = MaterialTheme.colors.onSurface&#10;        )&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            style = MaterialTheme.typography.button&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.Screen&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;&#10;// Иконки для экранов&#10;private fun getScreenIcon(screen: Screen): ImageVector {&#10;    return when (screen) {&#10;        is Screen.Library -&gt; Icons.Default.LibraryMusic&#10;        is Screen.Search -&gt; Icons.Default.Search&#10;        is Screen.Player -&gt; Icons.Default.PlayArrow&#10;        is Screen.Settings -&gt; Icons.Default.Settings&#10;    }&#10;}&#10;&#10;private fun getScreenTitle(screen: Screen): String {&#10;    return when (screen) {&#10;        is Screen.Library -&gt; &quot;Библиотека&quot;&#10;        is Screen.Search -&gt; &quot;Поиск&quot;&#10;        is Screen.Player -&gt; &quot;Плеер&quot;&#10;        is Screen.Settings -&gt; &quot;Настройки&quot;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun TopBar(&#10;    currentScreen: Screen,&#10;    onNavigationClick: (Screen) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val screens = listOf(&#10;        Screen.Library,&#10;        Screen.Search,&#10;        Screen.Player,&#10;        Screen.Settings&#10;    )&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        shape = RoundedCornerShape(20.dp),&#10;        elevation = 8.dp,&#10;        backgroundColor = Color.White.copy(alpha = 0.95f)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(8.dp),&#10;            horizontalArrangement = Arrangement.SpaceEvenly,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            screens.forEach { screen -&gt;&#10;                NavigationItem(&#10;                    screen = screen,&#10;                    isSelected = currentScreen == screen,&#10;                    onClick = { onNavigationClick(screen) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun NavigationItem(&#10;    screen: Screen,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val backgroundColor = if (isSelected) {&#10;        Brush.linearGradient(&#10;            colors = listOf(&#10;                MusicPlayerColors.Purple,&#10;                MusicPlayerColors.Pink&#10;            )&#10;        )&#10;    } else {&#10;        Brush.linearGradient(&#10;            colors = listOf(&#10;                Color.Transparent,&#10;                Color.Transparent&#10;            )&#10;        )&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .clip(RoundedCornerShape(16.dp))&#10;            .background(backgroundColor)&#10;            .clickable(onClick = onClick)&#10;            .padding(horizontal = 16.dp, vertical = 12.dp),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = getScreenIcon(screen),&#10;                contentDescription = getScreenTitle(screen),&#10;                tint = if (isSelected) Color.White else MusicPlayerColors.DarkGray,&#10;                modifier = Modifier.size(20.dp)&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            &#10;            Text(&#10;                text = getScreenTitle(screen),&#10;                style = MaterialTheme.typography.caption,&#10;                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#10;                color = if (isSelected) Color.White else MusicPlayerColors.DarkGray&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/TrackItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/components/TrackItem.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.MusicTrack&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;&#10;@Composable&#10;fun TrackItem(&#10;    track: MusicTrack,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    isPlaying: Boolean = false&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 4.dp)&#10;            .clickable(onClick = onClick),&#10;        shape = RoundedCornerShape(16.dp),&#10;        elevation = if (isPlaying) 8.dp else 4.dp,&#10;        backgroundColor = if (isPlaying) MusicPlayerColors.Purple.copy(alpha = 0.1f) else MaterialTheme.colors.surface&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Иконка трека с градиентным фоном&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(56.dp)&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        brush = Brush.linearGradient(&#10;                            colors = listOf(&#10;                                MusicPlayerColors.Purple,&#10;                                MusicPlayerColors.Pink&#10;                            )&#10;                        )&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = if (isPlaying) Icons.Default.PlayArrow else Icons.Default.MusicNote,&#10;                    contentDescription = null,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            // Информация о треке&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = track.title,&#10;                    style = MaterialTheme.typography.h6,&#10;                    fontWeight = if (isPlaying) FontWeight.Bold else FontWeight.Medium,&#10;                    color = if (isPlaying) MusicPlayerColors.Purple else MaterialTheme.colors.onSurface,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = track.artist,&#10;                    style = MaterialTheme.typography.body2,&#10;                    color = MaterialTheme.colors.onSurface.copy(alpha = 0.7f),&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                if (track.duration != null) {&#10;                    Spacer(modifier = Modifier.height(2.dp))&#10;                    Text(&#10;                        text = formatDuration(track.duration!!),&#10;                        style = MaterialTheme.typography.caption,&#10;                        color = MaterialTheme.colors.onSurface.copy(alpha = 0.5f)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Индикатор воспроизведения&#10;            if (isPlaying) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(12.dp)&#10;                        .clip(CircleShape)&#10;                        .background(MusicPlayerColors.Green)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatDuration(duration: Int): String {&#10;    val minutes = duration / 60&#10;    val seconds = duration % 60&#10;    return String.format(&quot;%d:%02d&quot;, minutes, seconds)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.MusicNote&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.MusicTrack&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;&#10;@Composable&#10;fun TrackItem(&#10;    track: MusicTrack,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    isPlaying: Boolean = false&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 4.dp)&#10;            .clickable(onClick = onClick),&#10;        shape = RoundedCornerShape(16.dp),&#10;        elevation = if (isPlaying) 8.dp else 4.dp,&#10;        backgroundColor = if (isPlaying) MusicPlayerColors.Purple.copy(alpha = 0.1f) else MaterialTheme.colors.surface&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Иконка трека с градиентным фоном&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(56.dp)&#10;                    .clip(CircleShape)&#10;                    .background(&#10;                        brush = Brush.linearGradient(&#10;                            colors = listOf(&#10;                                MusicPlayerColors.Purple,&#10;                                MusicPlayerColors.Pink&#10;                            )&#10;                        )&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = if (isPlaying) Icons.Default.PlayArrow else Icons.Default.MusicNote,&#10;                    contentDescription = null,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(16.dp))&#10;&#10;            // Информация о треке&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = track.title,&#10;                    style = MaterialTheme.typography.h6,&#10;                    fontWeight = if (isPlaying) FontWeight.Bold else FontWeight.Medium,&#10;                    color = if (isPlaying) MusicPlayerColors.Purple else MaterialTheme.colors.onSurface,&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                Text(&#10;                    text = track.artist,&#10;                    style = MaterialTheme.typography.body2,&#10;                    color = MaterialTheme.colors.onSurface.copy(alpha = 0.7f),&#10;                    maxLines = 1,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                if (track.duration != null) {&#10;                    Spacer(modifier = Modifier.height(2.dp))&#10;                    Text(&#10;                        text = formatDuration(track.duration!!),&#10;                        style = MaterialTheme.typography.caption,&#10;                        color = MaterialTheme.colors.onSurface.copy(alpha = 0.5f)&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Индикатор воспроизведения&#10;            if (isPlaying) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(12.dp)&#10;                        .clip(CircleShape)&#10;                        .background(MusicPlayerColors.Green)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatDuration(duration: Long): String {&#10;    val minutes = (duration / 60).toInt()&#10;    val seconds = (duration % 60).toInt()&#10;    return String.format(&quot;%d:%02d&quot;, minutes, seconds)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/LibraryScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/LibraryScreen.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun LibraryScreen() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Your Library&quot;,&#10;            style = MaterialTheme.typography.h5,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // TODO: Replace with actual library content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .weight(1f),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;Your music library will appear here&quot;)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;&#10;@Composable&#10;fun LibraryScreen(appState: AppState) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Your Library&quot;,&#10;            style = MaterialTheme.typography.h5,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // TODO: Replace with actual library content&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .weight(1f),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;Your music library will appear here&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/MainScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/MainScreen.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;import com.example.musicplayer.Screen&#10;import com.example.musicplayer.ui.components.BottomPlayerBar&#10;import com.example.musicplayer.ui.components.TopBar&#10;&#10;@Composable&#10;fun MainScreen(appState: AppState) {&#10;    var currentScreen by remember { mutableStateOf&lt;Screen&gt;(Screen.Library) }&#10;    val currentTrack by appState.currentTrack.collectAsState()&#10;    val isPlaying by appState.isPlaying.collectAsState()&#10;    &#10;    Scaffold(&#10;        topBar = {&#10;            TopBar(&#10;                currentScreen = currentScreen,&#10;                onNavigationClick = { screen -&gt;&#10;                    currentScreen = screen&#10;                }&#10;            )&#10;        },&#10;        bottomBar = {&#10;            currentTrack?.let { track -&gt;&#10;                BottomPlayerBar(&#10;                    track = track,&#10;                    isPlaying = isPlaying,&#10;                    onPlayPauseClick = { appState.playPause() },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;        }&#10;    ) { padding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(padding)&#10;                .background(MaterialTheme.colors.background)&#10;        ) {&#10;            when (currentScreen) {&#10;                is Screen.Player -&gt; PlayerScreen(&#10;                    currentTrack = currentTrack,&#10;                    isPlaying = isPlaying,&#10;                    onPlayPauseClick = { appState.playPause() },&#10;                    onPreviousClick = { appState.playPreviousTrack() },&#10;                    onNextClick = { appState.playNextTrack() }&#10;                )&#10;                is Screen.Search -&gt; SearchScreen(&#10;                    availableTracks = appState.trackList.collectAsState().value,&#10;                    onTrackSelected = { track -&gt;&#10;                        appState.selectTrack(track)&#10;                    }&#10;                )&#10;                is Screen.Library -&gt; LibraryScreen()&#10;                is Screen.Settings -&gt; SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;import com.example.musicplayer.Screen&#10;import com.example.musicplayer.ui.components.BottomPlayerBar&#10;import com.example.musicplayer.ui.components.TopBar&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;&#10;@Composable&#10;fun MainScreen(appState: AppState) {&#10;    var currentScreen by remember { mutableStateOf&lt;Screen&gt;(Screen.Library) }&#10;    val currentTrack by appState.currentTrack.collectAsState()&#10;    val isPlaying by appState.isPlaying.collectAsState()&#10;    &#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MusicPlayerColors.DarkBackground,&#10;                        MusicPlayerColors.DarkSurface&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Scaffold(&#10;            backgroundColor = Color.Transparent,&#10;            topBar = {&#10;                TopBar(&#10;                    currentScreen = currentScreen,&#10;                    onNavigationClick = { screen -&gt;&#10;                        currentScreen = screen&#10;                    }&#10;                )&#10;            },&#10;            bottomBar = {&#10;                currentTrack?.let { track -&gt;&#10;                    BottomPlayerBar(&#10;                        track = track,&#10;                        isPlaying = isPlaying,&#10;                        onPlayPauseClick = { appState.playPause() },&#10;                        onPreviousClick = { /* TODO: Previous track logic */ },&#10;                        onNextClick = { /* TODO: Next track logic */ },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        ) { padding -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(padding)&#10;            ) {&#10;                when (currentScreen) {&#10;                    is Screen.Player -&gt; PlayerScreen(&#10;                        currentTrack = currentTrack,&#10;                        isPlaying = isPlaying,&#10;                        onPlayPauseClick = { appState.playPause() },&#10;                        onPreviousClick = { /* TODO: Previous track logic */ },&#10;                        onNextClick = { /* TODO: Next track logic */ },&#10;                        appState = appState&#10;                    )&#10;                    is Screen.Search -&gt; SearchScreen(appState = appState)&#10;                    is Screen.Library -&gt; LibraryScreen(appState = appState)&#10;                    is Screen.Settings -&gt; SettingsScreen()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/PlayerScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/PlayerScreen.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;import com.example.musicplayer.MusicTrack&#10;import com.example.musicplayer.ui.components.AlbumCover&#10;import com.example.musicplayer.ui.components.PlaybackProgressBar&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;&#10;@Composable&#10;fun PlayerScreen(&#10;    currentTrack: MusicTrack?,&#10;    isPlaying: Boolean,&#10;    onPlayPauseClick: () -&gt; Unit,&#10;    onPreviousClick: () -&gt; Unit,&#10;    onNextClick: () -&gt; Unit,&#10;    appState: AppState? = null&#10;) {&#10;    // Получаем реальные данные от MP3 плеера если доступны&#10;    val playerPosition by (appState?.playerPosition?.collectAsState() ?: remember { mutableStateOf(0L) })&#10;    val playerDuration by (appState?.playerDuration?.collectAsState() ?: remember { mutableStateOf(0L) })&#10;&#10;    // Используем данные плеера или fallback значения&#10;    val currentPositionSec = (playerPosition / 1000f).coerceAtLeast(0f)&#10;    val durationSec = if (playerDuration &gt; 0) (playerDuration / 1000f) else (currentTrack?.duration?.div(1000f) ?: 0f)&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MusicPlayerColors.DarkBackground,&#10;                        MusicPlayerColors.DarkSurface,&#10;                        MusicPlayerColors.DarkBackground&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            currentTrack?.let { track -&gt;&#10;                // Обложка альбома с красивой тенью&#10;                Card(&#10;                    modifier = Modifier&#10;                        .size(280.dp)&#10;                        .padding(16.dp),&#10;                    shape = RoundedCornerShape(24.dp),&#10;                    elevation = 16.dp&#10;                ) {&#10;                    AlbumCover(&#10;                        track = track,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(40.dp))&#10;&#10;                // Информация о треке&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&#10;                        text = track.title,&#10;                        style = MaterialTheme.typography.h4,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White,&#10;                        textAlign = TextAlign.Center,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis,&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = track.artist,&#10;                        style = MaterialTheme.typography.h6,&#10;                        color = Color.White.copy(alpha = 0.7f),&#10;                        textAlign = TextAlign.Center,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(40.dp))&#10;&#10;                // Прогресс бар с временем&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    PlaybackProgressBar(&#10;                        progress = if (durationSec &gt; 0) currentPositionSec / durationSec else 0f,&#10;                        onSeek = { progress -&gt;&#10;                            val newPosition = (progress * durationSec * 1000).toLong()&#10;                            appState?.seekTo(newPosition)&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        Text(&#10;                            text = formatTime(currentPositionSec),&#10;                            style = MaterialTheme.typography.caption,&#10;                            color = Color.White.copy(alpha = 0.7f)&#10;                        )&#10;                        Text(&#10;                            text = formatTime(durationSec),&#10;                            style = MaterialTheme.typography.caption,&#10;                            color = Color.White.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(40.dp))&#10;&#10;                // Кнопки управления&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceEvenly,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Предыдущий трек&#10;                    IconButton(&#10;                        onClick = onPreviousClick,&#10;                        modifier = Modifier&#10;                            .size(56.dp)&#10;                            .clip(CircleShape)&#10;                            .background(&#10;                                color = Color.White.copy(alpha = 0.2f)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.SkipPrevious,&#10;                            contentDescription = &quot;Previous&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(32.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Основная кнопка play/pause&#10;                    IconButton(&#10;                        onClick = onPlayPauseClick,&#10;                        modifier = Modifier&#10;                            .size(80.dp)&#10;                            .clip(CircleShape)&#10;                            .background(&#10;                                brush = Brush.linearGradient(&#10;                                    colors = listOf(&#10;                                        MusicPlayerColors.Purple,&#10;                                        MusicPlayerColors.Pink&#10;                                    )&#10;                                )&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (isPlaying) Icons.Default.Pause else Icons.Default.PlayArrow,&#10;                            contentDescription = if (isPlaying) &quot;Pause&quot; else &quot;Play&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(40.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Следующий трек&#10;                    IconButton(&#10;                        onClick = onNextClick,&#10;                        modifier = Modifier&#10;                            .size(56.dp)&#10;                            .clip(CircleShape)&#10;                            .background(&#10;                                color = Color.White.copy(alpha = 0.2f)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.SkipNext,&#10;                            contentDescription = &quot;Next&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(32.dp)&#10;                        )&#10;                    }&#10;                }&#10;            } ?: run {&#10;                // Состояние когда нет активного трека&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MusicNote,&#10;                        contentDescription = null,&#10;                        tint = Color.White.copy(alpha = 0.3f),&#10;                        modifier = Modifier.size(120.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    Text(&#10;                        text = &quot;Выберите трек для воспроизведения&quot;,&#10;                        style = MaterialTheme.typography.h6,&#10;                        color = Color.White.copy(alpha = 0.7f),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatTime(seconds: Float): String {&#10;    val minutes = (seconds / 60).toInt()&#10;    val secs = (seconds % 60).toInt()&#10;    return String.format(&quot;%d:%02d&quot;, minutes, secs)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;import com.example.musicplayer.MusicTrack&#10;import com.example.musicplayer.ui.components.AlbumCover&#10;import com.example.musicplayer.ui.components.PlaybackProgressBar&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;&#10;@Composable&#10;fun PlayerScreen(&#10;    currentTrack: MusicTrack?,&#10;    isPlaying: Boolean,&#10;    onPlayPauseClick: () -&gt; Unit,&#10;    onPreviousClick: () -&gt; Unit,&#10;    onNextClick: () -&gt; Unit,&#10;    appState: AppState? = null&#10;) {&#10;    // Получаем реальные данные от MP3 плеера если доступны&#10;    val playerPosition by (appState?.playerPosition?.collectAsState() ?: remember { mutableStateOf(0L) })&#10;    val playerDuration by (appState?.playerDuration?.collectAsState() ?: remember { mutableStateOf(0L) })&#10;&#10;    // Используем данные плеера или fallback значения&#10;    val currentPositionSec = (playerPosition / 1000f).coerceAtLeast(0f)&#10;    val durationSec = if (playerDuration &gt; 0) (playerDuration / 1000f) else (currentTrack?.duration?.toFloat() ?: 0f)&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MusicPlayerColors.DarkBackground,&#10;                        MusicPlayerColors.DarkSurface,&#10;                        MusicPlayerColors.DarkBackground&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            currentTrack?.let { track -&gt;&#10;                // Обложка альбома с красивой тенью&#10;                Card(&#10;                    modifier = Modifier&#10;                        .size(280.dp)&#10;                        .padding(16.dp),&#10;                    shape = RoundedCornerShape(24.dp),&#10;                    elevation = 16.dp&#10;                ) {&#10;                    AlbumCover(&#10;                        track = track,&#10;                        modifier = Modifier.fillMaxSize()&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(40.dp))&#10;&#10;                // Информация о треке&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&#10;                        text = track.title,&#10;                        style = MaterialTheme.typography.h4,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White,&#10;                        textAlign = TextAlign.Center,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis,&#10;                        modifier = Modifier.padding(horizontal = 16.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = track.artist,&#10;                        style = MaterialTheme.typography.h6,&#10;                        color = Color.White.copy(alpha = 0.7f),&#10;                        textAlign = TextAlign.Center,&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(40.dp))&#10;&#10;                // Прогресс бар с временем&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    PlaybackProgressBar(&#10;                        progress = if (durationSec &gt; 0) currentPositionSec / durationSec else 0f,&#10;                        onSeek = { progress -&gt;&#10;                            val newPosition = (progress * durationSec * 1000).toLong()&#10;                            appState?.seekTo(newPosition)&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp),&#10;                        horizontalArrangement = Arrangement.SpaceBetween&#10;                    ) {&#10;                        Text(&#10;                            text = formatTime(currentPositionSec),&#10;                            style = MaterialTheme.typography.caption,&#10;                            color = Color.White.copy(alpha = 0.7f)&#10;                        )&#10;                        Text(&#10;                            text = formatTime(durationSec),&#10;                            style = MaterialTheme.typography.caption,&#10;                            color = Color.White.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(40.dp))&#10;&#10;                // Кнопки управления&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceEvenly,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Предыдущий трек&#10;                    IconButton(&#10;                        onClick = onPreviousClick,&#10;                        modifier = Modifier&#10;                            .size(56.dp)&#10;                            .clip(CircleShape)&#10;                            .background(&#10;                                color = Color.White.copy(alpha = 0.2f)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.SkipPrevious,&#10;                            contentDescription = &quot;Previous&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(32.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Основная кнопка play/pause&#10;                    IconButton(&#10;                        onClick = onPlayPauseClick,&#10;                        modifier = Modifier&#10;                            .size(80.dp)&#10;                            .clip(CircleShape)&#10;                            .background(&#10;                                brush = Brush.linearGradient(&#10;                                    colors = listOf(&#10;                                        MusicPlayerColors.Purple,&#10;                                        MusicPlayerColors.Pink&#10;                                    )&#10;                                )&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (isPlaying) Icons.Default.Pause else Icons.Default.PlayArrow,&#10;                            contentDescription = if (isPlaying) &quot;Pause&quot; else &quot;Play&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(40.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Следующий трек&#10;                    IconButton(&#10;                        onClick = onNextClick,&#10;                        modifier = Modifier&#10;                            .size(56.dp)&#10;                            .clip(CircleShape)&#10;                            .background(&#10;                                color = Color.White.copy(alpha = 0.2f)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.SkipNext,&#10;                            contentDescription = &quot;Next&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(32.dp)&#10;                        )&#10;                    }&#10;                }&#10;            } ?: run {&#10;                // Состояние когда нет активного трека&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.MusicNote,&#10;                        contentDescription = null,&#10;                        tint = Color.White.copy(alpha = 0.3f),&#10;                        modifier = Modifier.size(120.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                    Text(&#10;                        text = &quot;Выберите трек для воспроизведения&quot;,&#10;                        style = MaterialTheme.typography.h6,&#10;                        color = Color.White.copy(alpha = 0.7f),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatTime(seconds: Float): String {&#10;    val minutes = (seconds / 60).toInt()&#10;    val secs = (seconds % 60).toInt()&#10;    return String.format(&quot;%d:%02d&quot;, minutes, secs)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/SearchScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/SearchScreen.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalSoftwareKeyboardController&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;import com.example.musicplayer.MusicTrack&#10;import com.example.musicplayer.data.deezer.DeezerApi&#10;import com.example.musicplayer.data.deezer.toAppMusicTrack&#10;import com.example.musicplayer.ui.components.TrackItem&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun SearchScreen(&#10;    appState: AppState,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var searchResults by remember { mutableStateOf&lt;List&lt;MusicTrack&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val scope = rememberCoroutineScope()&#10;    var debounceJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;    val keyboardController = LocalSoftwareKeyboardController.current&#10;&#10;    val currentTrack by appState.currentTrack.collectAsState()&#10;&#10;    fun performSearch(query: String) {&#10;        if (query.isBlank()) {&#10;            searchResults = emptyList()&#10;            return&#10;        }&#10;&#10;        scope.launch {&#10;            isLoading = true&#10;            error = null&#10;            try {&#10;                val results = DeezerApi.searchTracks(query).map { it.toAppMusicTrack() }&#10;                searchResults = results.take(20) // Ограничиваем результаты&#10;            } catch (e: Exception) {&#10;                error = &quot;Ошибка поиска: ${e.message}&quot;&#10;                searchResults = emptyList()&#10;            } finally {&#10;                isLoading = false&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Заголовок&#10;        Text(&#10;            text = &quot;Поиск музыки&quot;,&#10;            style = MaterialTheme.typography.h4,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color.White,&#10;            modifier = Modifier.padding(bottom = 24.dp)&#10;        )&#10;&#10;        // Поисковая строка&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(16.dp),&#10;            elevation = 8.dp,&#10;            backgroundColor = Color.White&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { newValue -&gt;&#10;                    searchQuery = newValue&#10;                    error = null&#10;                    debounceJob?.cancel()&#10;&#10;                    if (newValue.isBlank()) {&#10;                        searchResults = emptyList()&#10;                    } else {&#10;                        debounceJob = scope.launch {&#10;                            delay(500) // Debounce на 500ms&#10;                            performSearch(newValue)&#10;                        }&#10;                    }&#10;                },&#10;                placeholder = {&#10;                    Text(&#10;                        text = &quot;Поиск треков, исполнителей...&quot;,&#10;                        color = MusicPlayerColors.MediumGray&#10;                    )&#10;                },&#10;                leadingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;,&#10;                        tint = MusicPlayerColors.Purple&#10;                    )&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(&#10;                            onClick = {&#10;                                searchQuery = &quot;&quot;&#10;                                searchResults = emptyList()&#10;                                keyboardController?.hide()&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Clear,&#10;                                contentDescription = &quot;Clear&quot;,&#10;                                tint = MusicPlayerColors.MediumGray&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(&#10;                    imeAction = ImeAction.Search&#10;                ),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = {&#10;                        performSearch(searchQuery)&#10;                        keyboardController?.hide()&#10;                    }&#10;                ),&#10;                colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                    backgroundColor = Color.White,&#10;                    focusedBorderColor = MusicPlayerColors.Purple,&#10;                    unfocusedBorderColor = MusicPlayerColors.LightGray,&#10;                    textColor = MusicPlayerColors.DarkGray&#10;                ),&#10;                shape = RoundedCornerShape(16.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Результаты поиска&#10;        when {&#10;            isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            color = MusicPlayerColors.Purple&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Поиск треков...&quot;,&#10;                            style = MaterialTheme.typography.body1,&#10;                            color = Color.White.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            error != null -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    backgroundColor = MusicPlayerColors.Pink.copy(alpha = 0.1f)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Error,&#10;                            contentDescription = null,&#10;                            tint = MusicPlayerColors.Pink,&#10;                            modifier = Modifier.size(48.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = error!!,&#10;                            style = MaterialTheme.typography.body1,&#10;                            color = Color.White,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            searchResults.isEmpty() &amp;&amp; searchQuery.isNotEmpty() -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    backgroundColor = Color.White.copy(alpha = 0.1f)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.SearchOff,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.5f),&#10;                            modifier = Modifier.size(64.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Ничего не найдено&quot;,&#10;                            style = MaterialTheme.typography.h6,&#10;                            color = Color.White.copy(alpha = 0.7f),&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                        Text(&#10;                            text = &quot;Попробуйте изменить запрос&quot;,&#10;                            style = MaterialTheme.typography.body2,&#10;                            color = Color.White.copy(alpha = 0.5f),&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            searchQuery.isEmpty() -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    backgroundColor = Color.White.copy(alpha = 0.1f)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.MusicNote,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.5f),&#10;                            modifier = Modifier.size(64.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Найдите свою музыку&quot;,&#10;                            style = MaterialTheme.typography.h6,&#10;                            color = Color.White.copy(alpha = 0.7f),&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                        Text(&#10;                            text = &quot;Введите название трека или исполнителя&quot;,&#10;                            style = MaterialTheme.typography.body2,&#10;                            color = Color.White.copy(alpha = 0.5f),&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(searchResults) { track -&gt;&#10;                        TrackItem(&#10;                            track = track,&#10;                            onClick = {&#10;                                appState.playTrack(track)&#10;                            },&#10;                            isPlaying = currentTrack?.id == track.id&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;import com.example.musicplayer.MusicTrack&#10;import com.example.musicplayer.data.deezer.DeezerApi&#10;import com.example.musicplayer.data.deezer.toAppMusicTrack&#10;import com.example.musicplayer.ui.components.TrackItem&#10;import com.example.musicplayer.ui.theme.MusicPlayerColors&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(androidx.compose.ui.ExperimentalComposeUiApi::class)&#10;@Composable&#10;fun SearchScreen(&#10;    appState: AppState,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var searchResults by remember { mutableStateOf&lt;List&lt;MusicTrack&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val scope = rememberCoroutineScope()&#10;    var debounceJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;&#10;    val currentTrack by appState.currentTrack.collectAsState()&#10;&#10;    fun performSearch(query: String) {&#10;        if (query.isBlank()) {&#10;            searchResults = emptyList()&#10;            return&#10;        }&#10;&#10;        scope.launch {&#10;            isLoading = true&#10;            error = null&#10;            try {&#10;                val results = DeezerApi.searchTracks(query).map { it.toAppMusicTrack() }&#10;                searchResults = results.take(20) // Ограничиваем результаты&#10;            } catch (e: Exception) {&#10;                error = &quot;Ошибка поиска: ${e.message}&quot;&#10;                searchResults = emptyList()&#10;            } finally {&#10;                isLoading = false&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Заголовок&#10;        Text(&#10;            text = &quot;Поиск музыки&quot;,&#10;            style = MaterialTheme.typography.h4,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color.White,&#10;            modifier = Modifier.padding(bottom = 24.dp)&#10;        )&#10;&#10;        // Поисковая строка&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(16.dp),&#10;            elevation = 8.dp,&#10;            backgroundColor = Color.White&#10;        ) {&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { newValue -&gt;&#10;                    searchQuery = newValue&#10;                    error = null&#10;                    debounceJob?.cancel()&#10;&#10;                    if (newValue.isBlank()) {&#10;                        searchResults = emptyList()&#10;                    } else {&#10;                        debounceJob = scope.launch {&#10;                            delay(500) // Debounce на 500ms&#10;                            performSearch(newValue)&#10;                        }&#10;                    }&#10;                },&#10;                placeholder = {&#10;                    Text(&#10;                        text = &quot;Поиск треков, исполнителей...&quot;,&#10;                        color = MusicPlayerColors.MediumGray&#10;                    )&#10;                },&#10;                leadingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Search,&#10;                        contentDescription = &quot;Search&quot;,&#10;                        tint = MusicPlayerColors.Purple&#10;                    )&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(&#10;                            onClick = {&#10;                                searchQuery = &quot;&quot;&#10;                                searchResults = emptyList()&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Clear,&#10;                                contentDescription = &quot;Clear&quot;,&#10;                                tint = MusicPlayerColors.MediumGray&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(&#10;                    imeAction = ImeAction.Search&#10;                ),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = {&#10;                        performSearch(searchQuery)&#10;                    }&#10;                ),&#10;                colors = TextFieldDefaults.outlinedTextFieldColors(&#10;                    backgroundColor = Color.White,&#10;                    focusedBorderColor = MusicPlayerColors.Purple,&#10;                    unfocusedBorderColor = MusicPlayerColors.LightGray,&#10;                    textColor = MusicPlayerColors.DarkGray&#10;                ),&#10;                shape = RoundedCornerShape(16.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Результаты поиска&#10;        when {&#10;            isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            color = MusicPlayerColors.Purple&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Поиск треков...&quot;,&#10;                            style = MaterialTheme.typography.body1,&#10;                            color = Color.White.copy(alpha = 0.7f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            error != null -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    backgroundColor = MusicPlayerColors.Pink.copy(alpha = 0.1f)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Error,&#10;                            contentDescription = null,&#10;                            tint = MusicPlayerColors.Pink,&#10;                            modifier = Modifier.size(48.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Text(&#10;                            text = error!!,&#10;                            style = MaterialTheme.typography.body1,&#10;                            color = Color.White,&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            searchResults.isEmpty() &amp;&amp; searchQuery.isNotEmpty() -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    backgroundColor = Color.White.copy(alpha = 0.1f)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.SearchOff,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.5f),&#10;                            modifier = Modifier.size(64.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Ничего не найдено&quot;,&#10;                            style = MaterialTheme.typography.h6,&#10;                            color = Color.White.copy(alpha = 0.7f),&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                        Text(&#10;                            text = &quot;Попробуйте изменить запрос&quot;,&#10;                            style = MaterialTheme.typography.body2,&#10;                            color = Color.White.copy(alpha = 0.5f),&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            searchQuery.isEmpty() -&gt; {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    backgroundColor = Color.White.copy(alpha = 0.1f)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(32.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.MusicNote,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.5f),&#10;                            modifier = Modifier.size(64.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Text(&#10;                            text = &quot;Найдите свою музыку&quot;,&#10;                            style = MaterialTheme.typography.h6,&#10;                            color = Color.White.copy(alpha = 0.7f),&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                        Text(&#10;                            text = &quot;Введите название трека или исполнителя&quot;,&#10;                            style = MaterialTheme.typography.body2,&#10;                            color = Color.White.copy(alpha = 0.5f),&#10;                            textAlign = TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    items(searchResults) { track -&gt;&#10;                        TrackItem(&#10;                            track = track,&#10;                            onClick = {&#10;                                appState.playTrack(track)&#10;                            },&#10;                            isPlaying = currentTrack?.id == track.id&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/screens/SettingsScreen.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun SettingsScreen() {&#10;    var darkTheme by remember { mutableStateOf(false) }&#10;    &#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Settings&quot;,&#10;            style = MaterialTheme.typography.h5,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Theme settings&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = 2.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Appearance&quot;,&#10;                    style = MaterialTheme.typography.subtitle1&#10;                )&#10;                &#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&quot;Dark theme&quot;)&#10;                    Switch(&#10;                        checked = darkTheme,&#10;                        onCheckedChange = { darkTheme = it }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.example.musicplayer.AppState&#10;&#10;@Composable&#10;fun SettingsScreen(appState: AppState? = null) {&#10;    var darkTheme by remember { mutableStateOf(false) }&#10;    &#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Settings&quot;,&#10;            style = MaterialTheme.typography.h5,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Theme settings&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = 2.dp&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Appearance&quot;,&#10;                    style = MaterialTheme.typography.subtitle1&#10;                )&#10;                &#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&quot;Dark theme&quot;)&#10;                    Switch(&#10;                        checked = darkTheme,&#10;                        onCheckedChange = { darkTheme = it }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // TODO: Add settings content here&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .weight(1f),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Text(&quot;Settings will appear here&quot;)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.theme&#10;&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material.MaterialTheme&#10;import androidx.compose.material.darkColors&#10;import androidx.compose.material.lightColors&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;&#10;private val DarkColorPalette = darkColors(&#10;    primary = Color(0xFFBB86FC),&#10;    primaryVariant = Color(0xFF3700B3),&#10;    secondary = Color(0xFF03DAC6),&#10;    background = Color(0xFF121212),&#10;    surface = Color(0xFF1E1E1E),&#10;    onPrimary = Color.Black,&#10;    onSecondary = Color.Black,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White,&#10;)&#10;&#10;private val LightColorPalette = lightColors(&#10;    primary = Color(0xFF6200EE),&#10;    primaryVariant = Color(0xFF3700B3),&#10;    secondary = Color(0xFF03DAC6),&#10;    background = Color.White,&#10;    surface = Color(0xFFF5F5F5),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.Black,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black,&#10;)&#10;&#10;@Composable&#10;fun AppTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colors = if (darkTheme) {&#10;        DarkColorPalette&#10;    } else {&#10;        LightColorPalette&#10;    }&#10;&#10;    MaterialTheme(&#10;        colors = colors,&#10;        typography = Typography,&#10;        shapes = Shapes,&#10;        content = content&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.theme&#10;&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material.MaterialTheme&#10;import androidx.compose.material.darkColors&#10;import androidx.compose.material.lightColors&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Современная палитра для музыкального плеера&#10;object MusicPlayerColors {&#10;    // Основные цвета&#10;    val Purple = Color(0xFF6C63FF)&#10;    val PurpleLight = Color(0xFF9B93FF)&#10;    val PurpleDark = Color(0xFF4A42C7)&#10;    &#10;    // Акцентные цвета&#10;    val Pink = Color(0xFFFF6B9D)&#10;    val Orange = Color(0xFFFF8A65)&#10;    val Blue = Color(0xFF42A5F5)&#10;    val Green = Color(0xFF66BB6A)&#10;    &#10;    // Нейтральные цвета&#10;    val DarkBackground = Color(0xFF0D0D0D)&#10;    val DarkSurface = Color(0xFF1A1A1A)&#10;    val DarkCard = Color(0xFF2A2A2A)&#10;    val LightGray = Color(0xFFE0E0E0)&#10;    val MediumGray = Color(0xFF757575)&#10;    val DarkGray = Color(0xFF424242)&#10;    &#10;    // Градиентные цвета&#10;    val GradientStart = Color(0xFF667eea)&#10;    val GradientEnd = Color(0xFFf093fb)&#10;}&#10;&#10;private val DarkColorPalette = darkColors(&#10;    primary = MusicPlayerColors.Purple,&#10;    primaryVariant = MusicPlayerColors.PurpleDark,&#10;    secondary = MusicPlayerColors.Pink,&#10;    background = MusicPlayerColors.DarkBackground,&#10;    surface = MusicPlayerColors.DarkSurface,&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onBackground = Color.White,&#10;    onSurface = Color.White,&#10;)&#10;&#10;private val LightColorPalette = lightColors(&#10;    primary = MusicPlayerColors.Purple,&#10;    primaryVariant = MusicPlayerColors.PurpleDark,&#10;    secondary = MusicPlayerColors.Pink,&#10;    background = Color.White,&#10;    surface = Color(0xFFFAFAFA),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onBackground = Color.Black,&#10;    onSurface = Color.Black,&#10;)&#10;&#10;@Composable&#10;fun AppTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colors = if (darkTheme) {&#10;        DarkColorPalette&#10;    } else {&#10;        LightColorPalette&#10;    }&#10;&#10;    MaterialTheme(&#10;        colors = colors,&#10;        typography = Typography,&#10;        shapes = Shapes,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/kotlin/com/example/musicplayer/ui/theme/Type.kt" />
              <option name="originalContent" value="package com.example.musicplayer.ui.theme&#10;&#10;import androidx.compose.material.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;val Typography = Typography(&#10;    h1 = TextStyle(fontSize = 96.sp, fontWeight = FontWeight.Light, letterSpacing = (-1.5).sp),&#10;    h2 = TextStyle(fontSize = 60.sp, fontWeight = FontWeight.Light, letterSpacing = (-0.5).sp),&#10;    h3 = TextStyle(fontSize = 48.sp, fontWeight = FontWeight.Normal),&#10;    h4 = TextStyle(fontSize = 34.sp, fontWeight = FontWeight.Normal, letterSpacing = 0.25.sp),&#10;    h5 = TextStyle(fontSize = 24.sp, fontWeight = FontWeight.Normal),&#10;    h6 = TextStyle(fontSize = 20.sp, fontWeight = FontWeight.Medium, letterSpacing = 0.15.sp),&#10;    subtitle1 = TextStyle(fontSize = 16.sp, fontWeight = FontWeight.Normal, letterSpacing = 0.15.sp),&#10;    subtitle2 = TextStyle(fontSize = 14.sp, fontWeight = FontWeight.Medium, letterSpacing = 0.1.sp),&#10;    body1 = TextStyle(fontSize = 16.sp, fontWeight = FontWeight.Normal, letterSpacing = 0.5.sp),&#10;    body2 = TextStyle(fontSize = 14.sp, fontWeight = FontWeight.Normal, letterSpacing = 0.25.sp),&#10;    button = TextStyle(fontSize = 14.sp, fontWeight = FontWeight.Medium, letterSpacing = 1.25.sp),&#10;    caption = TextStyle(fontSize = 12.sp, fontWeight = FontWeight.Normal, letterSpacing = 0.4.sp),&#10;    overline = TextStyle(fontSize = 10.sp, fontWeight = FontWeight.Normal, letterSpacing = 1.5.sp)&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.musicplayer.ui.theme&#10;&#10;import androidx.compose.material.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;// Современная типографика для музыкального плеера&#10;val Typography = Typography(&#10;    h1 = TextStyle(&#10;        fontSize = 32.sp, &#10;        fontWeight = FontWeight.Bold, &#10;        letterSpacing = (-0.5).sp&#10;    ),&#10;    h2 = TextStyle(&#10;        fontSize = 28.sp, &#10;        fontWeight = FontWeight.Bold, &#10;        letterSpacing = (-0.25).sp&#10;    ),&#10;    h3 = TextStyle(&#10;        fontSize = 24.sp, &#10;        fontWeight = FontWeight.SemiBold&#10;    ),&#10;    h4 = TextStyle(&#10;        fontSize = 20.sp, &#10;        fontWeight = FontWeight.SemiBold, &#10;        letterSpacing = 0.15.sp&#10;    ),&#10;    h5 = TextStyle(&#10;        fontSize = 18.sp, &#10;        fontWeight = FontWeight.Medium&#10;    ),&#10;    h6 = TextStyle(&#10;        fontSize = 16.sp, &#10;        fontWeight = FontWeight.Medium, &#10;        letterSpacing = 0.15.sp&#10;    ),&#10;    subtitle1 = TextStyle(&#10;        fontSize = 16.sp, &#10;        fontWeight = FontWeight.Normal, &#10;        letterSpacing = 0.15.sp&#10;    ),&#10;    subtitle2 = TextStyle(&#10;        fontSize = 14.sp, &#10;        fontWeight = FontWeight.Medium, &#10;        letterSpacing = 0.1.sp&#10;    ),&#10;    body1 = TextStyle(&#10;        fontSize = 16.sp, &#10;        fontWeight = FontWeight.Normal, &#10;        letterSpacing = 0.5.sp&#10;    ),&#10;    body2 = TextStyle(&#10;        fontSize = 14.sp, &#10;        fontWeight = FontWeight.Normal, &#10;        letterSpacing = 0.25.sp&#10;    ),&#10;    button = TextStyle(&#10;        fontSize = 14.sp, &#10;        fontWeight = FontWeight.Medium, &#10;        letterSpacing = 0.75.sp&#10;    ),&#10;    caption = TextStyle(&#10;        fontSize = 12.sp, &#10;        fontWeight = FontWeight.Normal, &#10;        letterSpacing = 0.4.sp&#10;    ),&#10;    overline = TextStyle(&#10;        fontSize = 10.sp, &#10;        fontWeight = FontWeight.Medium, &#10;        letterSpacing = 1.5.sp&#10;    )&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>